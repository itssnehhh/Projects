package com.example.imagesaverapplication.util

import android.app.DownloadManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.net.Uri
import android.os.Build
import android.os.Environment
import androidx.core.app.NotificationCompat
import com.example.cpimagedownloadapplication.R
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.ResponseBody
import java.io.File
import java.io.FileOutputStream
import java.io.InputStream

object DownloadUtils {

    private const val CHANNEL_ID = "download_channel"
    private const val CHANNEL_NAME = "Download Channel"

    suspend fun downloadImage(
        context: Context,
        imageUrl: String,
        onProgress: (Int) -> Unit,
        onDownloadSuccess: (File) -> Unit
    ) {
        try {
            val response = RetrofitClient.apiService.downloadImage(imageUrl)
            if (response.isSuccessful) {
                response.body()?.let { body ->
                    val file = saveFile(context, body, onProgress)
                    onDownloadSuccess(file)
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    private suspend fun saveFile(
        context: Context,
        body: ResponseBody,
        onProgress: (Int) -> Unit
    ): File = withContext(Dispatchers.IO) {
        val fileName = "downloaded_image.jpg"
        val file = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES), fileName)
        val inputStream: InputStream? = body.byteStream()
        val outputStream = FileOutputStream(file)
        val totalSize = body.contentLength()
        val data = ByteArray(1024)
        var count: Int
        var progress = 0
        var downloadedSize: Long = 0

        inputStream.use { input ->
            outputStream.use { output ->
                while (input?.read(data).also { count = it ?: -1 } != -1) {
                    output.write(data, 0, count)
                    downloadedSize += count
                    val newProgress = ((downloadedSize * 100) / totalSize).toInt()
                    if (newProgress != progress) {
                        progress = newProgress
                        onProgress(progress)
                    }
                }
            }
        }

        file
    }

    fun showNotification(context: Context, progress: Int) {
        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_LOW
            )
            notificationManager.createNotificationChannel(channel)
        }

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setContentTitle("Image Download")
            .setContentText("Download in progress")
            .setSmallIcon(R.drawable.download)
            .setProgress(100, progress, false)
            .build()

        notificationManager.notify(1, notification)
    }

    fun showCompletionNotification(context: Context, file: File) {
        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setContentTitle("Download Complete")
            .setContentText("Image downloaded successfully")
            .setSmallIcon(R.drawable.download)
            .build()

        notificationManager.notify(1, notification)
    }
}



2. Main SCreen

package com.example.imagesaverapplication.screen

import android.content.Context
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.rememberAsyncImagePainter
import com.example.cpimagedownloadapplication.R
import com.example.imagesaverapplication.util.DownloadUtils
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.File

@Composable
fun ImageSaverScreen() {
    val context = LocalContext.current
    var imageUrl by remember { mutableStateOf("") }
    var showImage by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) }
    var downloadComplete by remember { mutableStateOf(false) }
    var downloadedFile: File? by remember { mutableStateOf(null) }

    val downloadImage = { url: String ->
        isLoading = true
        downloadComplete = false
        CoroutineScope(Dispatchers.IO).launch {
            DownloadUtils.downloadImage(
                context,
                url,
                onProgress = { progress ->
                    DownloadUtils.showNotification(context, progress)
                },
                onDownloadSuccess = { file ->
                    downloadedFile = file
                    isLoading = false
                    downloadComplete = true
                    DownloadUtils.showCompletionNotification(context, file)
                }
            )
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7E5FA)),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        BasicTextField(
            value = imageUrl,
            onValueChange = { imageUrl = it },
            modifier = Modifier
                .padding(16.dp)
                .background(Color.White)
                .padding(8.dp)
        )

        Button(onClick = {
            if (imageUrl.isNotEmpty()) {
                downloadImage(imageUrl)
                showImage = true
            } else {
                Toast.makeText(
                    context,
                    "Please enter a valid URL",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }) {
            Text(text = "Download Image")
        }

        Spacer(modifier = Modifier.size(16.dp))

        if (isLoading) {
            CircularProgressIndicator()
        }

        if (showImage) {
            ImageCard(imageUrl = imageUrl)
        }

        Spacer(modifier = Modifier.size(16.dp))

        if (downloadComplete) {
            Button(onClick = { saveImageToGallery(context, downloadedFile) }) {
                Text(text = "Save to Gallery")
            }
        }
    }
}

@Composable
fun ImageCard(imageUrl: String) {
    Card(
        modifier = Modifier
            .padding(16.dp)
            .size(200.dp)
    ) {
        Image(
            painter = rememberAsyncImagePainter(imageUrl),
            contentDescription = null,
            contentScale = ContentScale.Crop,
            modifier = Modifier.fillMaxSize()
        )
    }
}

fun saveImageToGallery(context: Context, file: File?) {
    file?.let {
        // Code to save the file to the Gallery
    }
}

@Preview
@Composable
fun PreviewImageSaverScreen() {
    ImageSaverScreen()
}
