import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.TweenSpec
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.MaterialTheme
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp

@Composable
fun GalleryScreen(onItemClick: (Int) -> Unit) {
    // List of image IDs
    val images = listOf(
        R.drawable.image1,
        R.drawable.image2,
        R.drawable.image3
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        images.forEachIndexed { index, image ->
            ImageItem(
                image = image,
                onClick = { onItemClick(index) }
            )
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@Composable
fun ImageItem(image: Int, onClick: () -> Unit) {
    Box(
        modifier = Modifier
            .size(120.dp)
            .clickable(onClick = onClick)
            .background(color = Color.LightGray, shape = CircleShape)
    ) {
        Image(
            painter = painterResource(id = image),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .graphicsLayer {
                    // Apply animations here
                },
            contentScale = ContentScale.Crop
        )
    }
}

@Composable
fun DetailScreen(image: Int, onBackPressed: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(color = MaterialTheme.colors.background)
    ) {
        Image(
            painter = painterResource(id = image),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            contentScale = ContentScale.FillBounds
        )

        // Back button
        IconButton(
            onClick = onBackPressed,
            modifier = Modifier
                .padding(16.dp)
                .align(Alignment.TopStart)
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_back),
                contentDescription = "Back"
            )
        }
    }
}

@Composable
fun SharedElementTransitionExample() {
    var selectedItemIndex by remember { mutableStateOf(-1) }

    // Animatable to track the scale of the selected image during transition
    val scale = remember { Animatable(0f) }

    if (selectedItemIndex != -1) {
        val targetScale = remember { 1f }
        LaunchedEffect(key1 = selectedItemIndex) {
            scale.animateTo(
                targetValue = targetScale,
                animationSpec = TweenSpec(durationMillis = 500)
            )
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        GalleryScreen { index ->
            selectedItemIndex = index
        }

        if (selectedItemIndex != -1) {
            DetailScreen(
                image = R.drawable.image1, // Replace with actual image resource
                onBackPressed = { selectedItemIndex = -1 }
            )
        }
    }
}
