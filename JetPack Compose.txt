  implementation("androidx.datastore:datastore-preferences:1.0.0")

1. Preferences
package com.example.cpdevelopauthentify.preferences

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import com.example.cpdevelopauthentify.model.User
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

object UserPreferences {

    private val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "user_prefs")

    private val NAME_KEY = stringPreferencesKey("name")
    private val EMAIL_KEY = stringPreferencesKey("email")
    private val PASSWORD_KEY = stringPreferencesKey("password")
    private val ADDRESS_KEY = stringPreferencesKey("address")
    private val DOB_KEY = stringPreferencesKey("dob")
    private val BLOOD_GROUP_KEY = stringPreferencesKey("blood_group")
    private val GENDER_KEY = stringPreferencesKey("gender")
    private val PROFILE_PICTURE_KEY = stringPreferencesKey("profile_picture")
    private val IS_LOGGED_IN_KEY = booleanPreferencesKey("is_logged_in")

    suspend fun saveUser(context: Context, user: User) {
        context.dataStore.edit { preferences ->
            preferences[NAME_KEY] = user.name
            preferences[EMAIL_KEY] = user.email
            preferences[PASSWORD_KEY] = user.password
            preferences[ADDRESS_KEY] = user.address
            preferences[DOB_KEY] = user.dob
            preferences[BLOOD_GROUP_KEY] = user.bloodGroup
            preferences[GENDER_KEY] = user.gender
            preferences[PROFILE_PICTURE_KEY] = user.profilePicture ?: ""
            // Do not set is_logged_in here
        }
    }

    fun userFlow(context: Context): Flow<User?> = context.dataStore.data.map { preferences ->
        val name = preferences[NAME_KEY] ?: return@map null
        val email = preferences[EMAIL_KEY] ?: return@map null
        val password = preferences[PASSWORD_KEY] ?: return@map null
        val address = preferences[ADDRESS_KEY] ?: return@map null
        val dob = preferences[DOB_KEY] ?: return@map null
        val bloodGroup = preferences[BLOOD_GROUP_KEY] ?: return@map null
        val gender = preferences[GENDER_KEY] ?: return@map null
        val profilePicture = preferences[PROFILE_PICTURE_KEY] ?: ""
        User(name, email, password, address, dob, bloodGroup, gender, profilePicture)
    }

    fun isLoggedInFlow(context: Context): Flow<Boolean> = context.dataStore.data.map { preferences ->
        preferences[IS_LOGGED_IN_KEY] ?: false
    }

    suspend fun setLoggedIn(context: Context, loggedIn: Boolean) {
        context.dataStore.edit { preferences ->
            preferences[IS_LOGGED_IN_KEY] = loggedIn
        }
    }

    suspend fun clearUser(context: Context) {
        context.dataStore.edit {
            it.clear()
        }
    }
}


2. Main Activity
package com.example.cpdevelopauthentify

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.cpdevelopauthentify.preferences.UserPreferences
import com.example.cpdevelopauthentify.registerScreen.SignUpScreen1
import com.example.cpdevelopauthentify.registerScreen.SignUpScreen2

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MainScreen()
        }
    }
}

@Composable
fun MainScreen() {
    val context = LocalContext.current
    val navController = rememberNavController()
    val isLoggedIn = UserPreferences.isLoggedInFlow(context).collectAsState(initial = false)

    LaunchedEffect(isLoggedIn.value) {
        val startDestination = if (isLoggedIn.value) "home_screen" else "signup_screen1"
        navController.navigate(startDestination) {
            popUpTo(navController.graph.startDestinationId) { inclusive = true }
        }
    }
    NavHostContainer(navController)
}

@Composable
fun NavHostContainer(navController: NavHostController) {
    NavHost(navController = navController, startDestination = "signup_screen1") {
        composable("home_screen") {
            HomeScreen(navController)
        }
        composable("signup_screen1") {
            SignUpScreen1(navController)
        }
        composable("signup_screen2") {
            SignUpScreen2(navController)
        }
        composable("login_screen") {
            LoginScreen(navController)
        }
    }
}

@Preview
@Composable
fun MainScreenPreview() {
    MainScreen()
}


3. Signup 1
package com.example.cpdevelopauthentify.registerScreen

import android.app.DatePickerDialog
import android.net.Uri
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import coil.compose.rememberImagePainter
import com.example.cpdevelopauthentify.R
import java.util.Calendar

@Composable
fun SignUpScreen1(navController: NavHostController) {
    val context = LocalContext.current
    val name = remember { mutableStateOf("") }
    val email = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }
    val address = remember { mutableStateOf("") }
    val dob = remember { mutableStateOf("") }
    val profilePicture = remember { mutableStateOf("") }

    val calendar = Calendar.getInstance()
    val datePickerDialog = DatePickerDialog(
        context,
        { _, year, month, dayOfMonth ->
            dob.value = "$dayOfMonth/${month + 1}/$year"
        },
        calendar.get(Calendar.YEAR),
        calendar.get(Calendar.MONTH),
        calendar.get(Calendar.DAY_OF_MONTH)
    )

    val nameError = remember { mutableStateOf("") }
    val emailError = remember { mutableStateOf("") }
    val passwordError = remember { mutableStateOf("") }
    val addressError = remember { mutableStateOf("") }
    val dobError = remember { mutableStateOf("") }

    val galleryLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent(),
        onResult = { uri: Uri? ->
            uri?.let {
                profilePicture.value = it.toString()
            }
        }
    )

    LazyColumn(
        verticalArrangement = Arrangement.Center,
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        item {
            OutlinedTextField(
                value = name.value,
                onValueChange = { name.value = it },
                label = { Text(text = "Full Name") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                isError = nameError.value.isNotEmpty()
            )
            if (nameError.value.isNotEmpty()) {
                Text(
                    text = nameError.value,
                    color = Color.Red,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(start = 16.dp)
                )
            }

            OutlinedTextField(
                value = email.value,
                onValueChange = { email.value = it },
                label = { Text(text = "Email address") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                isError = emailError.value.isNotEmpty()
            )
            if (emailError.value.isNotEmpty()) {
                Text(
                    text = nameError.value,
                    color = Color.Red,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(start = 16.dp)
                )
            }

            OutlinedTextField(
                value = password.value,
                onValueChange = { password.value = it },
                label = { Text(text = "Password") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                isError = passwordError.value.isNotEmpty()
            )
            if (passwordError.value.isNotEmpty()) {
                Text(
                    text = nameError.value,
                    color = Color.Red,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(start = 16.dp)
                )
            }

            OutlinedTextField(
                value = address.value,
                onValueChange = { address.value = it },
                label = { Text(text = "Address") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                isError = addressError.value.isNotEmpty()
            )
            if (addressError.value.isNotEmpty()) {
                Text(
                    text = nameError.value,
                    color = Color.Red,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(start = 16.dp)
                )
            }

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .clickable { datePickerDialog.show() }
            ) {
                OutlinedTextField(
                    value = dob.value,
                    onValueChange = { dob.value = it },
                    label = { Text(text = "Date of Birth") },
                    enabled = false,
                    trailingIcon = {
                        Icon(Icons.Filled.DateRange, contentDescription = "Select date")
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color.White),
                    isError = dobError.value.isNotEmpty()
                )
                if (dobError.value.isNotEmpty()) {
                    Text(
                        text = nameError.value,
                        color = Color.Red,
                        fontSize = 12.sp,
                        modifier = Modifier.padding(start = 16.dp)
                    )
                }
            }

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .clickable { galleryLauncher.launch("image/*") }
            ) {
                if (profilePicture.value.isNotEmpty()) {
                    Image(
                        painter = rememberImagePainter(profilePicture.value),
                        contentDescription = null,
                        contentScale = ContentScale.Crop,
                        modifier = Modifier
                            .size(128.dp)
                            .background(Color.Gray, shape = CircleShape)
                    )
                } else {
                    Image(
                        painter = rememberImagePainter(R.drawable.ic_launcher_background),
                        contentDescription = null,
                        contentScale = ContentScale.Crop,
                        modifier = Modifier.size(128.dp)
                    )
                }
            }
            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    // Navigate only if all fields are valid
                    if (name.value.isNotEmpty() && email.value.isNotEmpty() && password.value.isNotEmpty()
                        && address.value.isNotEmpty() && dob.value.isNotEmpty()
                    ) {
                        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email.value).matches()) {
                            Toast.makeText(
                                context,
                                "Please enter valid email address",
                                Toast.LENGTH_SHORT
                            ).show()
                        } else if (password.value.length < 8 || !password.value.any { it.isDigit() } || !password.value.any { it.isLetter() }) {
                            Toast.makeText(
                                context,
                                "Password must be at least 8 characters, including letters and numbers",
                                Toast.LENGTH_SHORT
                            ).show()
                        } else {
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "name",
                                name.value
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "email",
                                email.value
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "password",
                                password.value
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "address",
                                address.value
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "dob",
                                dob.value
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "profilePicture",
                                profilePicture.value
                            )
                            navController.navigate("signup_screen2")
                        }
                    }
                },
                colors = ButtonDefaults.buttonColors(Color(0xFF3BB3E9)),
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                Text(text = "Next")
            }
        }
    }
}

@Preview
@Composable
fun SignUpScreen1Preview() {
    SignUpScreen1(navController = NavHostController(LocalContext.current))
}

Sign Up 2
package com.example.cpdevelopauthentify.registerScreen

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.cpdevelopauthentify.model.User
import com.example.cpdevelopauthentify.preferences.UserPreferences
import kotlinx.coroutines.launch

@Composable
fun SignUpScreen2(navController: NavHostController) {
    val bloodGroup = remember { mutableStateOf("") }
    val gender = remember { mutableStateOf("") }
    val coroutineScope = rememberCoroutineScope()
    val context = LocalContext.current

    // Retrieve the individual user attributes from the previous screen
    val previousBackStackEntry = navController.previousBackStackEntry
    val name = previousBackStackEntry?.savedStateHandle?.get<String>("name") ?: ""
    val email = previousBackStackEntry?.savedStateHandle?.get<String>("email") ?: ""
    val password = previousBackStackEntry?.savedStateHandle?.get<String>("password") ?: ""
    val address = previousBackStackEntry?.savedStateHandle?.get<String>("address") ?: ""
    val dob = previousBackStackEntry?.savedStateHandle?.get<String>("dob") ?: ""
    val profilePicture =
        previousBackStackEntry?.savedStateHandle?.get<String>("profilePicture") ?: ""

    LazyColumn(
        verticalArrangement = Arrangement.Center,
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        item {
            OutlinedTextField(
                value = bloodGroup.value,
                onValueChange = { bloodGroup.value = it },
                label = { Text(text = "Blood Group") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White)
            )

            OutlinedTextField(
                value = gender.value,
                onValueChange = { gender.value = it },
                label = { Text(text = "Gender") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White)
            )

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    if (bloodGroup.value.isEmpty() || gender.value.isEmpty()) {
                        Toast.makeText(
                            context,
                            "Please enter all required details",
                            Toast.LENGTH_SHORT
                        ).show()
                    } else {
                        val updatedUser = User(
                            name = name,
                            email = email,
                            password = password,
                            address = address,
                            dob = dob,
                            bloodGroup = bloodGroup.value,
                            gender = gender.value,
                            profilePicture = profilePicture
                        )
                        coroutineScope.launch {
                            UserPreferences.saveUser(context, updatedUser)
                            navController.navigate("login_screen") {
                                popUpTo(navController.graph.startDestinationId) { inclusive = true }
                            }
                        }
                    }
                },
                colors = ButtonDefaults.buttonColors(Color(0xFF3BB3E9)),
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                Text(text = "Complete Sign Up")
            }
        }
    }
}


4. Login
package com.example.cpdevelopauthentify

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.cpdevelopauthentify.preferences.UserPreferences
import kotlinx.coroutines.launch

@Composable
fun LoginScreen(navController: NavHostController) {

    var email by rememberSaveable { mutableStateOf("") }
    var password by rememberSaveable { mutableStateOf("") }
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()

    LazyColumn(
        verticalArrangement = Arrangement.Center,
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        item {
            OutlinedTextField(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                value = email,
                onValueChange = { email = it },
                label = { Text(text = "Email address") })
            OutlinedTextField(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White),
                value = password,
                onValueChange = { password = it },
                label = { Text(text = "Password") })

            Text(
                textAlign = TextAlign.End,
                text = "Forgot Password ?",
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
                fontWeight = FontWeight.Bold,
                style = MaterialTheme.typography.titleMedium
            )

            Button(
                onClick = {
                    coroutineScope.launch {
                        UserPreferences.userFlow(context).collect { user ->
                            if (user != null && user.email == email && user.password == password) {
                                UserPreferences.saveUser(context, user)
                                navController.navigate("home_screen") {
                                    popUpTo("login_screen") { inclusive = true }
                                }
                            } else {
                                // Email not found or incorrect, show error
                                Toast.makeText(
                                    context,
                                    "Invalid email or password",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        }
                    }

//                    val user = UserPreferences.userFlow(context).collectAsState(initial = null).value
//                    if (user != null && user.email == email && user.password == password) {
//                        UserPreferences.setLoggedIn(context, true)
//                        navController.navigate("home_screen") {
//                            popUpTo(navController.graph.startDestinationId) { inclusive = true }
//                        }
//                    } else {
//                        Toast.makeText(context, "Invalid email or password", Toast.LENGTH_SHORT).show()
//                    }
                },
                colors = ButtonDefaults.buttonColors(Color(0xFF3BB3E9)),
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                Text(text = "Login")
            }
            Spacer(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(100.dp)
            )

            Row(
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                Text(
                    text = "Don't have an account ?",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier
                        .padding(4.dp)
                )
                TextButton(onClick = { navController.navigate("signup_screen1") }) {
                    Text(
                        fontWeight = FontWeight.Bold,
                        text = "SignUp",
                        color = Color(0xFF3BB3E9),
                        style = MaterialTheme.typography.titleMedium
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun LoginScreenPreview() {
    LoginScreen(navController = NavHostController(LocalContext.current))
}

5. Home
package com.example.cpdevelopauthentify

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import coil.compose.rememberAsyncImagePainter
import com.example.cpdevelopauthentify.preferences.UserPreferences
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(navController: NavHostController) {
    val context = LocalContext.current
    val userFlow = UserPreferences.userFlow(context)
    val user by userFlow.collectAsState(initial = null)
    val coroutineScope = rememberCoroutineScope()
    var expanded by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
            .wrapContentSize(Alignment.TopEnd)
    ) {
        DropdownMenu(
            modifier = Modifier.background(Color.White),
            expanded = expanded,
            onDismissRequest = { expanded = false }
        ) {
            DropdownMenuItem(
                modifier = Modifier.border(1.dp, Color.LightGray),
                trailingIcon = {
                    Image(
                        imageVector = Icons.Default.Delete,
                        contentDescription = ""
                    )
                },
                text = { Text("Delete\nAccount") },
                onClick = {
                    coroutineScope.launch {
                        UserPreferences.clearUser(context)
                        navController.navigate("signup_screen1") {
                            popUpTo("home_screen") { inclusive = true }
                        }
                    }
                }
            )
            DropdownMenuItem(
                modifier = Modifier.border(1.dp, Color.LightGray),
                trailingIcon = {
                    Image(
                        imageVector = Icons.Filled.ExitToApp,
                        contentDescription = ""
                    )
                },
                text = { Text("Logout") },
                onClick = {
                    coroutineScope.launch {
                        navController.navigate("login_screen") {
                            popUpTo("home_screen") { inclusive = true }
                        }
                    }
                }
            )
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                actions = {
                    Icon(
                        imageVector = Icons.Default.MoreVert,
                        contentDescription = "",
                        modifier = Modifier
                            .padding(end = 8.dp)
                            .clickable {
                                expanded = !expanded
                            })
                },
                title = {
                    Text(
                        text = "Home",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color(0xFF3BB3E9))
            )
        }
    ) { paddingValues ->

        Box {
            Image(
                painter = painterResource(id = R.drawable.image),
                contentDescription = "",
                modifier = Modifier
                    .fillMaxSize()
                    .alpha(0.1f),
                contentScale = ContentScale.Crop
            )
        }
        LazyColumn(modifier = Modifier.padding(paddingValues)) {
            item {
                user?.let { user ->
                    Image(
                        painter = if (user.profilePicture != null) {
                            rememberAsyncImagePainter(model = user.profilePicture)
                        } else {
                            painterResource(
                                id = R.drawable.ic_launcher_background
                            )
                        },
                        contentDescription = "",
                        modifier = Modifier
                            .size(120.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = stringResource(id = R.string.name), modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.name,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = stringResource(id = R.string.email_address), modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.email,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = stringResource(id = R.string.phone_no),
                        modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.dob,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = stringResource(id = R.string.password), modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.password,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = stringResource(R.string.date_of_birth),
                        modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.dob,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = stringResource(id = R.string.address),
                        modifier = Modifier
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                    )
                    Text(
                        text = user.address,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(top = 16.dp)
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text(text = stringResource(R.string.gender))
                            Text(text = user.gender, style = MaterialTheme.typography.titleMedium)
                        }
                        Column(modifier = Modifier.weight(1f)) {
                            Text(text = stringResource(R.string.blood_group))
                            Text(
                                text = user.bloodGroup,
                                style = MaterialTheme.typography.titleMedium
                            )
                        }
                    }

                }
            }
        }
    }
}

@Preview
@Composable
fun HomeScreenPreview() {
    HomeScreen(navController = NavHostController(LocalContext.current))
}
