package com.example.musicplayer

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.musicplayer.ui.theme.MusicPlayerTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MusicPlayerTheme {
                // A surface container using the 'background' color from the theme
                Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colors.background) {
                    MusicPlayerApp()
                }
            }
        }
    }
}

@Composable
fun MusicPlayerApp(viewModel: MusicPlayerViewModel = viewModel()) {
    val songs = viewModel.songs.collectAsState()
    val currentSong = viewModel.currentSong.collectAsState()
    val isPlaying = viewModel.isPlaying.collectAsState()

    Column {
        LazyColumn(modifier = Modifier.weight(1f)) {
            items(songs.value) { song ->
                SongItem(song, currentSong.value, viewModel::playSong)
            }
        }
        if (currentSong.value != null) {
            PlayerControls(
                song = currentSong.value!!,
                isPlaying = isPlaying.value,
                onPlayPause = viewModel::playPause,
                onNext = viewModel::playNext,
                onPrevious = viewModel::playPrevious,
                onForward = { viewModel.seekBy(10000) },
                onRewind = { viewModel.seekBy(-10000) }
            )
        }
    }
}

@Composable
fun SongItem(song: Song, currentSong: Song?, onClick: (Song) -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { onClick(song) },
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(text = song.title, modifier = Modifier.weight(1f))
        if (currentSong == song) {
            Text(text = "Playing", color = MaterialTheme.colors.primary)
        }
    }
}

@Composable
fun PlayerControls(
    song: Song,
    isPlaying: Boolean,
    onPlayPause: () -> Unit,
    onNext: () -> Unit,
    onPrevious: () -> Unit,
    onForward: () -> Unit,
    onRewind: () -> Unit
) {
    Column {
        Text(text = song.title, modifier = Modifier.padding(8.dp))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onRewind) { Text("<<") }
            IconButton(onClick = onPrevious) { Text("<") }
            IconButton(onClick = onPlayPause) { Text(if (isPlaying) "Pause" else "Play") }
            IconButton(onClick = onNext) { Text(">") }
            IconButton(onClick = onForward) { Text(">>") }
        }
    }
}


package com.example.musicplayer

import android.app.Application
import android.content.ComponentName
import android.media.MediaPlayer
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

data class Song(val id: String, val title: String, val path: String)

class MusicPlayerViewModel(application: Application) : AndroidViewModel(application) {
    private val mediaPlayer = MediaPlayer()
    private val _songs = MutableStateFlow<List<Song>>(emptyList())
    private val _currentSong = MutableStateFlow<Song?>(null)
    private val _isPlaying = MutableStateFlow(false)

    val songs: StateFlow<List<Song>> = _songs
    val currentSong: StateFlow<Song?> = _currentSong
    val isPlaying: StateFlow<Boolean> = _isPlaying

    init {
        loadSongs()
    }

    private fun loadSongs() {
        // Load songs from the device
        // This is a placeholder implementation
        val dummySongs = listOf(
            Song("1", "Song 1", "/path/to/song1.mp3"),
            Song("2", "Song 2", "/path/to/song2.mp3")
        )
        _songs.value = dummySongs
    }

    fun playSong(song: Song) {
        _currentSong.value = song
        mediaPlayer.reset()
        mediaPlayer.setDataSource(song.path)
        mediaPlayer.prepare()
        mediaPlayer.start()
        _isPlaying.value = true
    }

    fun playPause() {
        if (mediaPlayer.isPlaying) {
            mediaPlayer.pause()
            _isPlaying.value = false
        } else {
            mediaPlayer.start()
            _isPlaying.value = true
        }
    }

    fun playNext() {
        // Implement next song logic
    }

    fun playPrevious() {
        // Implement previous song logic
    }

    fun seekBy(milliseconds: Int) {
        mediaPlayer.seekTo(mediaPlayer.currentPosition + milliseconds)
    }
}
package com.example.musicplayer

import android.app.Notification
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.os.IBinder
import androidx.core.app.NotificationCompat
import androidx.media.session.MediaButtonReceiver

class MusicService : Service() {

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        MediaButtonReceiver.handleIntent(mediaSession, intent)
        return START_STICKY
    }

    private fun createNotification(): Notification {
        val controller = mediaSession.controller
        val mediaMetadata = controller.metadata
        val description = mediaMetadata.description

        val builder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle(description.title)
            .setContentText(description.subtitle)
            .setSubText(description.description)
            .setLargeIcon(description.iconBitmap)
            .setContentIntent(controller.sessionActivity)
            .setDeleteIntent(
                MediaButtonReceiver.buildMediaButtonPendingIntent(
                    this,
                    PlaybackStateCompat.ACTION_STOP
                )
            )
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)

        // Add other notification options

        return builder.build()
    }

    companion object {
        private const val CHANNEL_ID = "music_channel"
    }
}
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.musicplayer">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MusicPlayer">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <service android:name=".MusicService" />
    </application>

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
</manifest>
dependencies {
    implementation "androidx.media:media:1.6.0"
    implementation "androidx.media:media-session:1.3.1"
}

package com.example.musicplayer

import android.app.Notification
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.media.MediaPlayer
import android.media.MediaPlayer.OnPreparedListener
import android.os.IBinder
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.media.session.MediaButtonReceiver
import androidx.media.session.MediaSessionCompat
import androidx.media.session.PlaybackStateCompat

class MusicService : Service() {

    private lateinit var mediaSession: MediaSessionCompat
    private lateinit var playbackStateBuilder: PlaybackStateCompat.Builder
    private var mediaPlayer: MediaPlayer? = null
    private var currentTrackIndex: Int = 0
    private val trackList = listOf(
        "path/to/song1.mp3",
        "path/to/song2.mp3",
        "path/to/song3.mp3"
    )

    override fun onCreate() {
        super.onCreate()

        mediaSession = MediaSessionCompat(this, "MusicService").apply {
            setCallback(mediaSessionCallback)
            setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS or MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS)
            setSessionActivity(sessionActivityPendingIntent())
        }

        playbackStateBuilder = PlaybackStateCompat.Builder()
            .setActions(
                PlaybackStateCompat.ACTION_PLAY or
                PlaybackStateCompat.ACTION_PAUSE or
                PlaybackStateCompat.ACTION_SKIP_TO_NEXT or
                PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS or
                PlaybackStateCompat.ACTION_STOP or
                PlaybackStateCompat.ACTION_SEEK_TO
            )
        mediaSession.setPlaybackState(playbackStateBuilder.build())
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        MediaButtonReceiver.handleIntent(mediaSession, intent)
        return START_STICKY
    }

    override fun onDestroy() {
        mediaPlayer?.release()
        mediaSession.release()
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private val mediaSessionCallback = object : MediaSessionCompat.Callback() {
        override fun onPlay() {
            if (mediaPlayer == null) {
                initializeMediaPlayer()
            }
            mediaPlayer?.start()
            updatePlaybackState(PlaybackStateCompat.STATE_PLAYING)
            startForegroundService()
        }

        override fun onPause() {
            mediaPlayer?.pause()
            updatePlaybackState(PlaybackStateCompat.STATE_PAUSED)
            stopForeground(false)
        }

        override fun onSkipToNext() {
            currentTrackIndex = (currentTrackIndex + 1) % trackList.size
            initializeMediaPlayer()
            onPlay()
        }

        override fun onSkipToPrevious() {
            currentTrackIndex = if (currentTrackIndex - 1 < 0) trackList.size - 1 else currentTrackIndex - 1
            initializeMediaPlayer()
            onPlay()
        }

        override fun onSeekTo(pos: Long) {
            mediaPlayer?.seekTo(pos.toInt())
            updatePlaybackState(PlaybackStateCompat.STATE_PLAYING)
        }

        override fun onStop() {
            mediaPlayer?.stop()
            updatePlaybackState(PlaybackStateCompat.STATE_STOPPED)
            stopSelf()
        }
    }

    private fun initializeMediaPlayer() {
        mediaPlayer?.release()
        mediaPlayer = MediaPlayer().apply {
            setDataSource(trackList[currentTrackIndex])
            prepareAsync()
            setOnPreparedListener(OnPreparedListener {
                updatePlaybackState(PlaybackStateCompat.STATE_PAUSED)
            })
            setOnCompletionListener {
                onSkipToNext()
            }
        }
    }

    private fun updatePlaybackState(state: Int) {
        playbackStateBuilder.setState(state, mediaPlayer?.currentPosition?.toLong() ?: 0, 1.0f)
        mediaSession.setPlaybackState(playbackStateBuilder.build())
    }

    private fun sessionActivityPendingIntent(): PendingIntent {
        val intent = packageManager.getLaunchIntentForPackage(packageName)
        return PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
    }

    private fun createNotification(): Notification {
        val controller = mediaSession.controller
        val mediaMetadata = controller.metadata
        val description = mediaMetadata.description

        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle(description.title)
            .setContentText(description.subtitle)
            .setSubText(description.description)
            .setLargeIcon(description.iconBitmap)
            .setContentIntent(controller.sessionActivity)
            .setDeleteIntent(
                MediaButtonReceiver.buildMediaButtonPendingIntent(
                    this,
                    PlaybackStateCompat.ACTION_STOP
                )
            )
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()
    }

    private fun startForegroundService() {
        startForeground(NOTIFICATION_ID, createNotification())
    }

    companion object {
        private const val CHANNEL_ID = "music_channel"
        private const val NOTIFICATION_ID = 1
    }
}

private fun createNotificationChannel() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val channel = NotificationChannel(
            CHANNEL_ID,
            "Music Playback",
            NotificationManager.IMPORTANCE_LOW
        ).apply {
            description = "Music playback controls"
        }
        val notificationManager: NotificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.createNotificationChannel(channel)
    }
}

override fun onCreate() {
    super.onCreate()

    createNotificationChannel()

    mediaSession = MediaSessionCompat(this, "MusicService").apply {
        setCallback(mediaSessionCallback)
        setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS or MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS)
        setSessionActivity(sessionActivityPendingIntent())
    }

    playbackStateBuilder = PlaybackStateCompat.Builder()
        .setActions(
            PlaybackStateCompat.ACTION_PLAY or
            PlaybackStateCompat.ACTION_PAUSE or
            PlaybackStateCompat.ACTION_SKIP_TO_NEXT or
            PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS or
            PlaybackStateCompat.ACTION_STOP or
            PlaybackStateCompat.ACTION_SEEK_TO
        )
    mediaSession.setPlaybackState(playbackStateBuilder.build())
}


package com.example.musicplayer

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.media.MediaPlayer
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat
import androidx.media.session.MediaButtonReceiver
import androidx.media.session.MediaSessionCompat
import androidx.media.session.PlaybackStateCompat

class MusicService : Service() {

    private lateinit var mediaSession: MediaSessionCompat
    private lateinit var playbackStateBuilder: PlaybackStateCompat.Builder
    private var mediaPlayer: MediaPlayer? = null
    private var currentTrackIndex: Int = 0
    private val trackList = listOf(
        "path/to/song1.mp3",
        "path/to/song2.mp3",
        "path/to/song3.mp3"
    )

    override fun onCreate() {
        super.onCreate()

        createNotificationChannel()

        mediaSession = MediaSessionCompat(this, "MusicService").apply {
            setCallback(mediaSessionCallback)
            setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS or MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS)
            setSessionActivity(sessionActivityPendingIntent())
        }

        playbackStateBuilder = PlaybackStateCompat.Builder()
            .setActions(
                PlaybackStateCompat.ACTION_PLAY or
                PlaybackStateCompat.ACTION_PAUSE or
                PlaybackStateCompat.ACTION_SKIP_TO_NEXT or
                PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS or
                PlaybackStateCompat.ACTION_STOP or
                PlaybackStateCompat.ACTION_SEEK_TO
            )
        mediaSession.setPlaybackState(playbackStateBuilder.build())
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        MediaButtonReceiver.handleIntent(mediaSession, intent)
        return START_STICKY
    }

    override fun onDestroy() {
        mediaPlayer?.release()
        mediaSession.release()
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private val mediaSessionCallback = object : MediaSessionCompat.Callback() {
        override fun onPlay() {
            if (mediaPlayer == null) {
                initializeMediaPlayer()
            }
            mediaPlayer?.start()
            updatePlaybackState(PlaybackStateCompat.STATE_PLAYING)
            startForegroundService()
        }

        override fun onPause() {
            mediaPlayer?.pause()
            updatePlaybackState(PlaybackStateCompat.STATE_PAUSED)
            stopForeground(false)
        }

        override fun onSkipToNext() {
            currentTrackIndex = (currentTrackIndex + 1) % trackList.size
            initializeMediaPlayer()
            onPlay()
        }

        override fun onSkipToPrevious() {
            currentTrackIndex = if (currentTrackIndex - 1 < 0) trackList.size - 1 else currentTrackIndex - 1
            initializeMediaPlayer()
            onPlay()
        }

        override fun onSeekTo(pos: Long) {
            mediaPlayer?.seekTo(pos.toInt())
            updatePlaybackState(PlaybackStateCompat.STATE_PLAYING)
        }

        override fun onStop() {
            mediaPlayer?.stop()
            updatePlaybackState(PlaybackStateCompat.STATE_STOPPED)
            stopSelf()
        }
    }

    private fun initializeMediaPlayer() {
        mediaPlayer?.release()
        mediaPlayer = MediaPlayer().apply {
            setDataSource(trackList[currentTrackIndex])
            prepareAsync()
            setOnPreparedListener {
                updatePlaybackState(PlaybackStateCompat.STATE_PAUSED)
            }
            setOnCompletionListener {
                mediaSessionCallback.onSkipToNext()
            }
        }
    }

    private fun updatePlaybackState(state: Int) {
        playbackStateBuilder.setState(state, mediaPlayer?.currentPosition?.toLong() ?: 0, 1.0f)
        mediaSession.setPlaybackState(playbackStateBuilder.build())
    }

    private fun sessionActivityPendingIntent(): PendingIntent {
        val intent = packageManager.getLaunchIntentForPackage(packageName)
        return PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
    }

    private fun createNotification(): Notification {
        val controller = mediaSession.controller
        val mediaMetadata = controller.metadata
        val description = mediaMetadata.description

        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle(description.title)
            .setContentText(description.subtitle)
            .setSubText(description.description)
            .setLargeIcon(description.iconBitmap)
            .setContentIntent(controller.sessionActivity)
            .setDeleteIntent(
                MediaButtonReceiver.buildMediaButtonPendingIntent(
                    this,
                    PlaybackStateCompat.ACTION_STOP
                )
            )
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .build()
    }

    private fun startForegroundService() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            createNotificationChannel()
        }
        startForeground(NOTIFICATION_ID, createNotification())
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Music Playback",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "Music playback controls"
            }
            val notificationManager: NotificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
    }

    companion object {
        private const val CHANNEL_ID = "music_channel"
        private const val NOTIFICATION_ID = 1
    }
}

