22. Minion Speak
package com.example.cpminionspeak.ui.screen

import android.app.Application
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.cpminionspeak.R
import com.example.cpminionspeak.data.model.TranslationEntity
import com.example.cpminionspeak.ui.theme.YellowCard
import com.example.cpminionspeak.viewModel.MinionViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HistoryScreen(viewModel: MinionViewModel, navController: NavHostController) {

    var historyList by remember { mutableStateOf(emptyList<TranslationEntity>()) }
    var showDialog by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        viewModel.getHistory { historyList = it }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = TopAppBarDefaults.topAppBarColors(Color.Black),
                title = {
                    Text(
                        color = Color.White,
                        fontWeight = FontWeight.SemiBold,
                        text = stringResource(R.string.history),
                        style = MaterialTheme.typography.titleLarge
                    )
                },
                navigationIcon = {
                    Icon(
                        modifier = Modifier
                            .padding(8.dp)
                            .clickable { navController.popBackStack() },
                        tint = Color.Yellow,
                        imageVector = Icons.Filled.ArrowBack,
                        contentDescription = ""
                    )
                },
                actions = {
                    Icon(
                        modifier = Modifier
                            .padding(8.dp)
                            .clickable { showDialog = true }
                            .size(32.dp),
                        imageVector = Icons.Default.Delete,
                        contentDescription = "",
                        tint = Color.Red
                    )
                }
            )
        }
    ) { paddingValues ->
        Box(modifier = Modifier.padding(paddingValues)) {
            Image(
                alpha = 0.5f,
                contentScale = ContentScale.Crop,
                painter = painterResource(id = R.drawable.minion_bg),
                contentDescription = "",
                modifier = Modifier.fillMaxSize()
            )
        }
        LazyColumn(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        ) {
            items(historyList) { history ->
                HistoryCard(history = history, onDelete = { id ->
                    viewModel.deleteTranslation(id) { updatedHistory ->
                        historyList = updatedHistory
                    }
                })
            }
        }
    }

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                TextButton(
                    onClick = {
                        viewModel.clearHistory()
                        historyList = emptyList()
                        showDialog = false
                    }
                ) {
                    Text(text = stringResource(R.string.delete))
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text(text = stringResource(R.string.cancel))
                }
            },
            title = { Text(text = stringResource(R.string.delete_history)) },
            text = { Text(text = stringResource(R.string.are_you_sure_you_want_to_delete_all_history)) }
        )
    }
}

@Composable
fun HistoryCard(
    history: TranslationEntity,
    onDelete: (Int) -> Unit,
) {
    Card(
        elevation = CardDefaults.cardElevation(4.dp),
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        colors = CardDefaults.cardColors(YellowCard)
    ) {
        Row {
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    color = Color.DarkGray,
                    fontWeight = FontWeight.Bold,
                    text = stringResource(R.string.searched_text),
                    modifier = Modifier.padding(start = 16.dp, top = 8.dp),
                    style = MaterialTheme.typography.bodySmall
                )
                Text(
                    text = history.originalText,
                    modifier = Modifier.padding(start = 16.dp),
                    style = MaterialTheme.typography.bodyLarge
                )
                Text(
                    color = Color.DarkGray,
                    fontWeight = FontWeight.Bold,
                    text = stringResource(R.string.translated_text),
                    modifier = Modifier.padding(start = 16.dp, top = 8.dp),
                    style = MaterialTheme.typography.bodySmall
                )
                Text(
                    text = history.translatedText,
                    modifier = Modifier.padding(start = 16.dp, bottom = 8.dp),
                    style = MaterialTheme.typography.bodyLarge
                )
            }
            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "",
                modifier = Modifier
                    .padding(16.dp)
                    .clickable {
                        onDelete(history.id)
                    }
            )
        }
    }
}

@Preview
@Composable
fun HistoryScreenPreview() {
    HistoryScreen(
        MinionViewModel(Application()),
        navController = NavHostController(LocalContext.current)
    )
}


package com.example.cpminionspeak.viewModel

import android.app.Application
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.cpminionspeak.data.model.TranslationEntity
import com.example.cpminionspeak.data.network.MinionApiService
import com.example.cpminionspeak.data.network.TranslationRepository
import kotlinx.coroutines.launch

class MinionViewModel(application: Application) : AndroidViewModel(application) {

    private val repository = TranslationRepository(application)
    private val minionApiService = MinionApiService.create()

    fun translateText(text: String, onSuccess: (String) -> Unit) {
        viewModelScope.launch {
            try {
                val response = minionApiService.translate(text)
                val translatedText = response.contents.translated
                onSuccess(translatedText)
                saveTranslation(text, translatedText)
            } catch (e: Exception) {
                Log.d("TAG", "translateText: ${e.message}")
            }
        }
    }

    private fun saveTranslation(originalText: String, translateText: String) {
        repository.saveTranslation(originalText, translateText)
    }

    fun getHistory(onSuccess : (List<TranslationEntity>) -> Unit){
        viewModelScope.launch {
            val history = repository.getAllTranslations()
            onSuccess(history)
        }
    }

    fun clearHistory(){
        repository.deleteAllTranslations()
    }

    fun deleteTranslation(id:Int, onSuccess: (List<TranslationEntity>) -> Unit){
        viewModelScope.launch {
            repository.deleteTranslation(id)
            val updatedHistory = repository.getAllTranslations()
            onSuccess(updatedHistory)
        }
    }
}