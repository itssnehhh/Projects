1. 
// build.gradle (app level)
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 33
    defaultConfig {
        applicationId "com.example.reminderapp"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.0'
    implementation 'androidx.compose.ui:ui:1.4.3'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.4.3'
    implementation 'androidx.compose.material3:material3:1.0.1'
    implementation 'androidx.compose.material:material:1.4.3'
    implementation 'androidx.navigation:navigation-compose:2.5.3'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
}

2. 
// ReminderReceiver.kt
package com.example.reminderapp

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat

class ReminderReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val notification = NotificationCompat.Builder(context, "reminder_channel")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("Stand Up Reminder")
            .setContentText("It's time to stand up and walk around!")
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .build()

        val notificationManager = NotificationManagerCompat.from(context)
        notificationManager.notify(1, notification)
    }
}


3. 
// MainActivity.kt
package com.example.reminderapp

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.work.*
import com.example.reminderapp.ui.theme.ReminderAppTheme
import java.util.concurrent.TimeUnit

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        createNotificationChannel()

        setContent {
            ReminderAppTheme {
                val navController = rememberNavController()
                NavHost(navController = navController, startDestination = "home") {
                    composable("home") { HomeScreen(navController = navController) }
                    composable("timePicker") { TimePickerScreen(navController = navController) }
                }
            }
        }
    }

    private fun createNotificationChannel() {
        val name = "Reminder Channel"
        val descriptionText = "Channel for reminder notifications"
        val importance = android.app.NotificationManager.IMPORTANCE_HIGH
        val channel = android.app.NotificationChannel("reminder_channel", name, importance).apply {
            description = descriptionText
        }

        val notificationManager: android.app.NotificationManager =
            getSystemService(Context.NOTIFICATION_SERVICE) as android.app.NotificationManager
        notificationManager.createNotificationChannel(channel)
    }
}


4 
// HomeScreen.kt
package com.example.reminderapp

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.work.*
import java.util.concurrent.TimeUnit

@Composable
fun HomeScreen(navController: NavController) {
    var isAlarmOn by remember { mutableStateOf(false) }
    var alarmStartTime by remember { mutableStateOf(System.currentTimeMillis()) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text("Reminder App", fontSize = 24.sp, modifier = Modifier.padding(bottom = 16.dp))

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Toggle Alarm")
            Switch(checked = isAlarmOn, onCheckedChange = { isChecked ->
                isAlarmOn = isChecked
                if (isChecked) {
                    scheduleAlarm(navController.context, alarmStartTime)
                } else {
                    cancelAlarm(navController.context)
                }
            })
        }

        Button(
            onClick = { navController.navigate("timePicker") },
            modifier = Modifier.padding(vertical = 8.dp)
        ) {
            Text("Set Reminder Start Time")
        }
    }
}

fun scheduleAlarm(context: Context, startTime: Long) {
    val intent = Intent(context, ReminderReceiver::class.java)
    val pendingIntent = PendingIntent.getBroadcast(
        context,
        0,
        intent,
        PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
    )

    val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    alarmManager.setRepeating(
        AlarmManager.RTC_WAKEUP,
        startTime,
        AlarmManager.INTERVAL_FIFTEEN_MINUTES,
        pendingIntent
    )
}

fun cancelAlarm(context: Context) {
    val intent = Intent(context, ReminderReceiver::class.java)
    val pendingIntent = PendingIntent.getBroadcast(
        context,
        0,
        intent,
        PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
    )

    val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    alarmManager.cancel(pendingIntent)
}

5. 
// TimePickerScreen.kt
package com.example.reminderapp

import android.app.TimePickerDialog
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import java.util.*

@Composable
fun TimePickerScreen(navController: NavController) {
    val context = LocalContext.current
    var time by remember { mutableStateOf(Calendar.getInstance()) }
    val timePickerDialog = TimePickerDialog(
        context,
        { _, hour: Int, minute: Int ->
            time.set(Calendar.HOUR_OF_DAY, hour)
            time.set(Calendar.MINUTE, minute)
        },
        time.get(Calendar.HOUR_OF_DAY),
        time.get(Calendar.MINUTE),
        true
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text("Set Reminder Start Time", fontSize = 24.sp, modifier = Modifier.padding(bottom = 16.dp))

        Button(
            onClick = { timePickerDialog.show() },
            modifier = Modifier.padding(vertical = 8.dp)
        ) {
            Text("Pick Time")
        }

        Button(
            onClick = {
                navController.previousBackStackEntry?.savedStateHandle?.set("startTime", time.timeInMillis)
                navController.popBackStack()
            },
            modifier = Modifier.padding(vertical = 8.dp)
        ) {
            Text("Set Time")
        }
    }
}


6.
// ui/theme/Theme.kt
package com.example.reminderapp.ui.theme

import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable

private val LightColors = lightColorScheme(
    primary = teal200,
    onPrimary = white,
    secondary = teal700
)

@Composable
fun ReminderAppTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = LightColors,
        typography = Typography,
        shapes = Shapes,
        content = content
    )
}

7. 
// MainActivity.kt (Update onCreate)
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    createNotificationChannel()

    val sharedPreferences = getSharedPreferences("reminder_prefs", Context.MODE_PRIVATE)
    val isAlarmOn = sharedPreferences.getBoolean("isAlarmOn", false)
    val alarmStartTime = sharedPreferences.getLong("alarmStartTime", System.currentTimeMillis())

    setContent {
        ReminderAppTheme {
            val navController = rememberNavController()
            NavHost(navController = navController, startDestination = "home") {
                composable("home") { HomeScreen(navController = navController, isAlarmOn, alarmStartTime) }
                composable("timePicker") { TimePickerScreen(navController = navController) }
            }
        }
    }

    if (isAlarmOn) {
        scheduleAlarm(this, alarmStartTime)
    }
}

8. 
@Composable
fun HomeScreen(navController: NavController, initialIsAlarmOn: Boolean, initialAlarmStartTime: Long) {
    var isAlarmOn by remember { mutableStateOf(initialIsAlarmOn) }
    var alarmStartTime by remember { mutableStateOf(initialAlarmStartTime) }

    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("reminder_prefs", Context.MODE_PRIVATE)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text("Reminder App", fontSize = 24.sp, modifier = Modifier.padding(bottom = 16.dp))

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Toggle Alarm")
            Switch(checked = isAlarmOn, onCheckedChange = { isChecked ->
                isAlarmOn = isChecked
                with(sharedPreferences.edit()) {
                    putBoolean("isAlarmOn", isChecked)
                    apply()
                }
                if (isChecked) {
                    scheduleAlarm(navController.context, alarmStartTime)
                } else {
                    cancelAlarm(navController.context)
                }
            })
        }

        Button(
            onClick = { navController.navigate("timePicker") },
            modifier = Modifier.padding(vertical = 8.dp)
        ) {
            Text("Set Reminder Start Time")
        }
    }
}

