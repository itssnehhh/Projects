import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.rememberUpdatedState

@Composable
fun SignUpScreen(navController: NavHostController) {
    // Other code ...

    val context = LocalContext.current
    val signUpViewModel = hiltViewModel<SignUpViewModel>()
    val firstName by signUpViewModel.firstName.collectAsState()
    val lastName by signUpViewModel.lastName.collectAsState()
    val email by signUpViewModel.email.collectAsState()
    val password by signUpViewModel.password.collectAsState()
    val confirmPassword by signUpViewModel.cPassword.collectAsState()
    val passwordVisible by signUpViewModel.passwordVisible.collectAsState()
    val isLoading by signUpViewModel.isLoading.collectAsState()
    val profileImageUri by signUpViewModel.profileImageUri.collectAsState()

    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->
        if (uri != null) {
            signUpViewModel.onProfileImageUriChange(uri)
        }
    }

    // Your existing code...

    Image(
        painter = if (profileImageUri != null) rememberImagePainter(profileImageUri) else painterResource(id = R.drawable.account),
        contentDescription = null,
        modifier = Modifier
            .padding(16.dp)
            .align(Alignment.Center)
            .fillMaxWidth()
            .size(160.dp)
            .clickable { launcher.launch("image/*") }
    )

    // Save button
    Button(
        colors = ButtonDefaults.buttonColors(Color(0xFF2BCA8D)),
        onClick = {
            signUpViewModel.createAccount(
                firstName = firstName,
                lastName = lastName,
                email = email,
                password = password,
                confirmPassword = confirmPassword,
                context = context
            ) { isValid ->
                if (isValid) {
                    // Upload image if available
                    profileImageUri?.let { uri ->
                        signUpViewModel.uploadProfileImage(uri) { success ->
                            if (success) {
                                navController.navigate(MAIN_SCREEN) {
                                    popUpTo(LOGIN_SCREEN) { inclusive = true }
                                }
                            } else {
                                Toast.makeText(context, "Image upload failed", Toast.LENGTH_SHORT).show()
                            }
                        }
                    } ?: run {
                        navController.navigate(MAIN_SCREEN) {
                            popUpTo(LOGIN_SCREEN) { inclusive = true }
                        }
                    }
                } else {
                    Toast.makeText(
                        context,
                        context.getString(R.string.toast_email_exist),
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        },
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Text(text = stringResource(R.string.btn_signup))
    }

    // Other code...
}


import android.net.Uri
import com.google.firebase.storage.FirebaseStorage
import com.google.firebase.storage.StorageReference

@HiltViewModel
class SignUpViewModel @Inject constructor(
    private val authRepository: FirebaseAuthRepository,
) : ViewModel() {

    // Existing state flows...

    private val _profileImageUri = MutableStateFlow<Uri?>(null)
    val profileImageUri: StateFlow<Uri?> = _profileImageUri

    fun onProfileImageUriChange(uri: Uri) {
        _profileImageUri.value = uri
    }

    fun uploadProfileImage(uri: Uri, onResult: (Boolean) -> Unit) {
        val storageRef: StorageReference = FirebaseStorage.getInstance().reference.child("profile_images/${System.currentTimeMillis()}.jpg")
        storageRef.putFile(uri)
            .addOnSuccessListener {
                onResult(true)
            }
            .addOnFailureListener {
                onResult(false)
            }
    }

    // Existing functions...
}
