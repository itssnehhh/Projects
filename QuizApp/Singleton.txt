@Singleton
class FirebaseAuthRepository @Inject constructor(
    private val auth: FirebaseAuth,
    private val userRepository: UserRepository,
) {

    fun getCurrentUser() = auth.currentUser

    suspend fun logIn(email: String, password: String): Boolean {
        return try {
            val result = auth.signInWithEmailAndPassword(email, password).await()
            result.user != null
        } catch (e: Exception) {
            false
        }
    }

    suspend fun createAccount(
        fName: String,
        lName: String,
        email: String,
        password: String,
        imageUrl: String,
    ): Boolean {
        return try {
            val signUpResult = auth.createUserWithEmailAndPassword(email, password).await()
            val user = signUpResult.user
            user?.let {
                val userProfile = UserProfileChangeRequest.Builder()
                    .setDisplayName("$fName $lName")
                    .build()
                it.updateProfile(userProfile).await()
                val userDetails = User(
                    id = it.uid,
                    firstname = fName,
                    lastname = lName,
                    email = email,
                    image = imageUrl
                )
                userRepository.addUser(it.uid, userDetails)
            } != null
        } catch (e: Exception) {
            false
        }
    }


    fun logout() {
        auth.signOut()
    }
}

-----------------------------------------------------------------------

suspend fun addUser(uid: String, user: User): Boolean {
        return try {
            userCollection.document(uid).set(user).await()
            true
        } catch (exception: Exception) {
            exception.printStackTrace()
            false
        }
    }
------------------------------------------------------------------------
fun createAccount(
        imageUri: String?,
        firstName: String,
        lastName: String,
        email: String,
        password: String,
        confirmPassword: String,
        context: Context,
        onResult: (Boolean) -> Unit,
    ) {
        when {
            imageUri?.isEmpty() == true -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_image_select), Toast.LENGTH_SHORT
                ).show()
            }

            firstName.isEmpty() || lastName.isEmpty() -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_empty_fields), Toast.LENGTH_SHORT
                ).show()
            }

            email.isEmpty() || !isEmailValid(email) -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_email_error),
                    Toast.LENGTH_SHORT
                ).show()
                onResult(false)
            }

            password.isEmpty() || !isPasswordValid(password) -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_valid_password), Toast.LENGTH_SHORT
                ).show()
                onResult(false)
            }

            confirmPassword.isEmpty() || confirmPassword != password -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_password_mismatch), Toast.LENGTH_SHORT
                ).show()
                onResult(false)
            }

            else -> {
                viewModelScope.launch {
                    _isLoading.value = true
                    val result = withContext(Dispatchers.IO) {
                        authRepository.createAccount(
                            fName = firstName,
                            lName = lastName,
                            email = email,
                            password = password,
                            imageUrl = imageUri ?: ""
                        )
                    }
                    _isLoading.value = false
                    onResult(result)
                }
            }
        }
    }
------------------------------------------------------------------------------------------------

   fun checkCurrentUser(
        email: String,
        password: String,
        context: Context,
        onResult: (Boolean) -> Unit
    ) {
        when {
            email.isEmpty() || !isEmailValid(email) -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_email_error), Toast.LENGTH_SHORT
                ).show()
                onResult(false)
            }

            password.isEmpty() -> {
                Toast.makeText(
                    context,
                    context.getString(R.string.toast_empty_password), Toast.LENGTH_SHORT
                ).show()
                onResult(false)
            }

            else -> {
                viewModelScope.launch {
                    _isLoading.value = true
                    val result = withContext(Dispatchers.IO) {
                        delay(timeMillis = 1000L)
                        authRepository.logIn(email, password)
                    }
                    _isLoading.value = false
                    onResult(result)
                }
            }
        }
    }
}
