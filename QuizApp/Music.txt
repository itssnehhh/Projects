package com.example.musicplayer.data.service

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.graphics.BitmapFactory
import android.media.MediaPlayer
import android.os.Binder
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat
import androidx.media.app.NotificationCompat.MediaStyle
import com.example.musicplayer.MainActivity
import com.example.musicplayer.R
import com.example.musicplayer.data.model.Song
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch

class MusicService : Service() {

    private val binder = MusicBinder()
    var mediaPlayer: MediaPlayer? = null
    private var currentSong: Song? = null
    private var songList: List<Song> = emptyList()
    private var currentSongIndex = -1
    private val scope = CoroutineScope(Dispatchers.Main + Job())
    private val _currentPosition = MutableStateFlow(0)

    companion object {
        const val ACTION_PLAY = "ACTION_PLAY"
        const val ACTION_PAUSE = "ACTION_PAUSE"
        const val ACTION_NEXT = "ACTION_NEXT"
        const val ACTION_PREVIOUS = "ACTION_PREVIOUS"
    }

    override fun onBind(intent: Intent?): IBinder {
        return binder
    }

    inner class MusicBinder : Binder() {
        fun getService(): MusicService = this@MusicService
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            ACTION_PLAY -> playPauseSong()
            ACTION_PAUSE -> playPauseSong()
            ACTION_NEXT -> playNext()
            ACTION_PREVIOUS -> playPrevious()
        }
        return START_NOT_STICKY
    }

    fun playSong(song: Song) {
        currentSong = song
        mediaPlayer?.reset()
        mediaPlayer = MediaPlayer().apply {
            setDataSource(song.path)
            prepare()
            start()
            setOnCompletionListener {
                stopSelf()
            }
        }
        showNotification()
        updateProgress()
    }

    fun togglePlayPause() {
        mediaPlayer?.let {
            if (it.isPlaying) {
                it.pause()
            } else {
                it.start()
            }
            showNotification()
        }
    }

    private fun playSongAtIndex(index: Int) {
        if (index >= 0 && index < songList.size) {
            playSong(songList[index])
        }
    }

    private fun playPauseSong() {
        togglePlayPause()
    }

    fun isPlaying(): Boolean {
        return mediaPlayer?.isPlaying ?: false
    }

    fun seekTo(position: Int) {
        mediaPlayer?.seekTo(position)
    }

    private fun playNext() {
        if (currentSongIndex < songList.size - 1) {
            playSongAtIndex(currentSongIndex + 1)
        }
    }

    private fun playPrevious() {
        if (currentSongIndex > 0) {
            playSongAtIndex(currentSongIndex - 1)
        }
    }
    
    private fun updateProgress() {
        scope.launch {
            while (isPlaying()) {
                _currentPosition.value = mediaPlayer?.currentPosition ?: 0
                delay(1000)
            }
        }
    }

    private fun showNotification() {

        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                "music_channel",
                "Music Playback",
                NotificationManager.IMPORTANCE_LOW
            )
            notificationManager.createNotificationChannel(channel)
        }

        val playPauseAction = NotificationCompat.Action(
            if (mediaPlayer?.isPlaying == true) R.drawable.pause else R.drawable.play,
            if (mediaPlayer?.isPlaying == true) "Pause" else "Play",
            PendingIntent.getService(this, 0, Intent(this, MusicService::class.java).apply {
                action = if (mediaPlayer?.isPlaying == true) ACTION_PAUSE else ACTION_PLAY
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val nextSong = NotificationCompat.Action(
            R.drawable.next,
            "Next",
            PendingIntent.getService(this, 1, Intent(this, MusicService::class.java).apply {
                action = ACTION_NEXT
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val previousSong = NotificationCompat.Action(
            R.drawable.previous,
            "Previous",
            PendingIntent.getService(this, 2, Intent(this, MusicService::class.java).apply {
                action = ACTION_PREVIOUS
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val notification = NotificationCompat.Builder(this, "music_channel")
            .setContentTitle(currentSong?.name)
            .setContentText(currentSong?.singerName)
            .setSmallIcon(R.drawable.music)
            .setLargeIcon(currentSong?.image?.let { BitmapFactory.decodeFile(it.toString()) })
            .setContentIntent(
                PendingIntent.getActivity(
                    this,
                    0,
                    Intent(this, MainActivity::class.java),
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
            )
            .addAction(previousSong)
            .addAction(playPauseAction)
            .addAction(nextSong)
            .setStyle(MediaStyle().setShowActionsInCompactView(0, 1, 2))
            .build()

        startForeground(1, notification)
    }

    override fun onDestroy() {
        mediaPlayer?.release()
        mediaPlayer = null
        scope.cancel()
        super.onDestroy()
    }

    fun setSongList(songs: List<Song>) {
        songList = songs
    }
}



2. 
package com.example.musicplayer.ui.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import com.example.musicplayer.R
import com.example.musicplayer.data.model.Song
import com.example.musicplayer.ui.screen.home.HomeViewModel

@Composable
fun BottomSheetContent(
    viewModel: HomeViewModel,
    currentPosition: Int,
    selectedSongIndex: Int,
    isPlaying: Boolean,
    songList: List<Song>,
    duration: Int
) {
    var sliderPosition by remember { mutableFloatStateOf(0f) }
    val durationValue = duration.toFloat().coerceAtLeast(1f)
    val currentPositionValue = currentPosition.toFloat().coerceAtLeast(0f)
    val song = songList[selectedSongIndex]

    LaunchedEffect(currentPosition) {
        if (duration > 0) {
            sliderPosition = (currentPositionValue / durationValue * 100).coerceIn(0f..100f)
        }
    }

    Box(
        modifier = Modifier
            .background(Color.Black)
            .fillMaxSize()
    ) {
        Image(
            painter = rememberAsyncImagePainter(model = song.image),
            contentDescription = "",
            modifier = Modifier
                .fillMaxSize()
                .alpha(0.4f),
            contentScale = ContentScale.Crop
        )
        Column(verticalArrangement = Arrangement.Center, modifier = Modifier.fillMaxSize()) {
            Image(
                painter = rememberAsyncImagePainter(model = song.image),
                contentDescription = "",
                modifier = Modifier
                    .padding(32.dp)
                    .aspectRatio(1f)
            )
            Text(
                text = song.name,
                maxLines = 2,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                color = Color.White,
                style = MaterialTheme.typography.titleLarge,
                modifier = Modifier
                    .padding(top = 16.dp, bottom = 4.dp)
                    .fillMaxWidth()
            )
            Text(
                text = song.singerName,
                maxLines = 1,
                textAlign = TextAlign.Center,
                color = Color.White,
                style = MaterialTheme.typography.titleSmall,
                modifier = Modifier
                    .padding(bottom = 32.dp)
                    .fillMaxWidth()
            )
            Slider(
                value = sliderPosition,
                onValueChange = {
                    sliderPosition = it
                    viewModel.seekTo(((sliderPosition / 100) * durationValue).toInt())
                },
                valueRange = 0f..100f,
                colors = SliderDefaults.colors(
                    thumbColor = Color.White,
                    activeTrackColor = Color.White,
                    inactiveTrackColor = Color.Gray
                ),
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .fillMaxWidth()
            )
            Row(
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .fillMaxWidth()
            ) {
                Text(
                    text = formatTime(currentPositionValue.toInt()),
                    color = Color.White,
                    style = MaterialTheme.typography.labelSmall,
                )
                Text(
                    text = formatTime(durationValue.toInt()),
                    color = Color.White,
                    style = MaterialTheme.typography.labelSmall,
                )
            }
            Spacer(modifier = Modifier.height(32.dp))
            PlayerControls(
                isPlaying = isPlaying,
                onPrevious = { viewModel.playPrevious() },
                onNext = { viewModel.playNext() },
                onTogglePlayPause = { viewModel.togglePlayPause() },
                onForward = { viewModel.forwardTenSeconds() },
                onBackward = { viewModel.backwardTenSeconds() }
            )
        }
    }
}

@Composable
fun PlayerControls(
    isPlaying: Boolean,
    onPrevious: () -> Unit,
    onNext: () -> Unit,
    onTogglePlayPause: () -> Unit,
    onForward: () -> Unit,
    onBackward: () -> Unit
) {
    Row(
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.fillMaxWidth()
    ) {
        IconButton(onClick = onBackward) {
            Image(
                painter = painterResource(id = R.drawable.fast_forward),
                contentDescription = "Backward",
                modifier = Modifier
                    .size(36.dp)
                    .rotate(180f)
            )
        }
        Spacer(modifier = Modifier.width(32.dp))
        IconButton(onClick = onPrevious) {
            Image(
                painter = painterResource(id = R.drawable.previous),
                contentDescription = "Previous",
                modifier = Modifier.size(48.dp)
            )
        }
        IconButton(onClick = onTogglePlayPause) {
            Image(
                painter = painterResource(id = if (isPlaying) R.drawable.pause else R.drawable.play),
                contentDescription = "Play/Pause",
                modifier = Modifier.size(48.dp)
            )
        }
        IconButton(onClick = onNext) {
            Image(
                painter = painterResource(id = R.drawable.next),
                contentDescription = "Next",
                modifier = Modifier.size(48.dp)
            )
        }
        Spacer(modifier = Modifier.width(32.dp))
        IconButton(onClick = onForward) {
            Image(
                painter = painterResource(R.drawable.fast_forward),
                contentDescription = "Forward",
                modifier = Modifier.size(36.dp)
            )
        }
    }
}

fun formatTime(milliseconds: Int): String {
    val minutes = milliseconds / 1000 / 60
    val seconds = milliseconds / 1000 % 60
    return String.format("%02d:%02d", minutes, seconds)
}

3. 
package com.example.musicplayer.ui.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import com.example.musicplayer.R
import com.example.musicplayer.data.model.Song
import com.example.musicplayer.ui.screen.home.HomeViewModel

@Composable
fun MiniPlayer(
    song: Song,
    viewModel: HomeViewModel,
    isPlaying: Boolean,
    selectedSongIndex: Int,
    songList: List<Song>
) {
    Row(
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Image(
            painter = rememberAsyncImagePainter(model = song.image),
            contentDescription = "",
            modifier = Modifier
                .size(80.dp)
                .aspectRatio(1f)
                .padding(4.dp)
        )
        Column(
            modifier = Modifier
                .padding(horizontal = 8.dp)
                .weight(1f)
        ) {
            Text(
                text = song.name,
                maxLines = 1,
                fontWeight = FontWeight.Bold,
                color = Color.White,
                overflow = TextOverflow.Ellipsis,
                style = MaterialTheme.typography.bodyLarge
            )
            Text(
                text = song.singerName,
                maxLines = 1,
                color = Color.White,
                style = MaterialTheme.typography.bodyMedium
            )
        }
        Image(painter = painterResource(id = R.drawable.previous),
            contentDescription = "",
            modifier = Modifier
                .padding(8.dp)
                .clickable {
                    if (selectedSongIndex > 0) {
                        viewModel.playSong(selectedSongIndex - 1)
                    } else {
                        viewModel.playSong(songList.size - 1)
                    }
                }
        )
        Image(
            painter = painterResource(id = if (isPlaying) R.drawable.pause else R.drawable.play),
            contentDescription = "",
            modifier = Modifier
                .padding(8.dp)
                .clickable {
                    viewModel.togglePlayPause()
                }
        )
        Image(painter = painterResource(id = R.drawable.next),
            contentDescription = "",
            modifier = Modifier
                .padding(8.dp)
                .clickable {
                    if (selectedSongIndex < songList.size - 1) {
                        viewModel.playSong(selectedSongIndex + 1)
                    } else if (selectedSongIndex == songList.size - 1) {
                        viewModel.playSong(0)
                    }
                }
        )
    }
}

4. 
package com.example.musicplayer.ui.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import com.example.musicplayer.data.model.Song
import com.example.musicplayer.ui.screen.home.HomeViewModel

@Composable
fun MusicCard(
    song: Song,
    homeViewModel: HomeViewModel,
    isPlaying: Boolean,
    onCardClick: () -> Unit,
) {

    var isLiked by remember { mutableStateOf(false) }

    Card(
        colors = CardDefaults.cardColors(Color(0xFFE3F5E3)),
        elevation = CardDefaults.elevatedCardElevation(4.dp),
        modifier = Modifier
            .padding(4.dp)
            .clickable { onCardClick() }
    ) {
        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
            song.let {
                Image(
                    painter = rememberAsyncImagePainter(it.image),
                    contentDescription = "",
                    modifier = Modifier
                        .padding(8.dp)
                        .size(120.dp)
                        .background(Color.LightGray)
                )
                Column(modifier = Modifier.padding(4.dp)) {
                    Text(
                        text = it.name,
                        maxLines = 2,
                        color = if (isPlaying) Color(0xFF35CE61) else Color.Black,
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.padding(4.dp)
                    )
                    Text(
                        text = it.singerName,
                        maxLines = 1,
                        modifier = Modifier.padding(4.dp)
                    )
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Image(
                            imageVector = Icons.Default.PlayArrow,
                            contentDescription = "",
                            modifier = Modifier.padding(4.dp)
                        )
                        Text(
                            text = homeViewModel.formatDuration(it.duration),
                            modifier = Modifier
                                .padding(4.dp)
                                .weight(1f)
                        )
                        Image(
                            imageVector = if (isLiked) Icons.Default.Favorite else Icons.Default.FavoriteBorder,
                            contentDescription = "",
                            colorFilter = ColorFilter.tint(if (isLiked) Color.Red else Color.Black),
                            modifier = Modifier
                                .padding(vertical = 4.dp, horizontal = 8.dp)
                                .clickable { isLiked = !isLiked }
                        )
                    }
                }
            }
        }
    }
}

5. 
package com.example.musicplayer.ui.screen.home

import android.content.Intent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.BottomSheetScaffold
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.material3.rememberBottomSheetScaffoldState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.musicplayer.R
import com.example.musicplayer.data.service.MusicService
import com.example.musicplayer.ui.component.BottomSheetContent
import com.example.musicplayer.ui.component.MiniPlayer
import com.example.musicplayer.ui.component.MusicCard
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen() {
    val viewModel = hiltViewModel<HomeViewModel>()
    val context = LocalContext.current
    val songList by viewModel.songList.collectAsState()
    val currentPosition by viewModel.currentPosition.collectAsState()
    val duration by viewModel.duration.collectAsState()
    val isPlaying by viewModel.isPlaying.collectAsState()
    val selectedSongIndex by viewModel.selectedSongIndex.collectAsState()
    val scaffoldState = rememberBottomSheetScaffoldState()
    val scope = rememberCoroutineScope()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = stringResource(id = R.string.app_name)) },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color(0xFF35CE61))
            )
        }
    ) { values ->
        BottomSheetScaffold(
            scaffoldState = scaffoldState,
            sheetContent = {
                if (selectedSongIndex >= 0) {
                    BottomSheetContent(
                        viewModel = viewModel,
                        currentPosition = currentPosition,
                        selectedSongIndex = selectedSongIndex,
                        isPlaying = isPlaying,
                        songList = songList,
                        duration = duration
                    )
                }
            },
            modifier = Modifier.padding(values),
            sheetPeekHeight = 0.dp,
        ) { paddingValues ->
            Box(modifier = Modifier.fillMaxSize()) {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxSize()
                        .background(Color.DarkGray)
                        .padding(paddingValues)
                ) {
                    items(songList) { song ->
                        MusicCard(
                            song,
                            viewModel,
                            isPlaying = selectedSongIndex == songList.indexOf(song)
                        ) {
                            viewModel.playSong(songList.indexOf(song))
                            scope.launch {
                                scaffoldState.bottomSheetState.expand()
                            }
                            context.startService(Intent(context, MusicService::class.java))
                        }
                    }
                }

                if (selectedSongIndex >= 0) {
                    val song = songList[selectedSongIndex]
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier
                            .fillMaxWidth()
                            .align(Alignment.BottomCenter)
                            .background(Color(0xFF35CE61))
                            .clickable {
                                scope.launch { scaffoldState.bottomSheetState.expand() }
                            }
                            .padding(paddingValues),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MiniPlayer(song,viewModel,isPlaying,selectedSongIndex,songList)
                    }
                }
            }
        }
    }
}

6. 
package com.example.musicplayer.ui.screen.home

import android.annotation.SuppressLint
import android.app.Application
import android.content.ComponentName
import android.content.ContentUris
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.media.MediaMetadataRetriever
import android.net.Uri
import android.os.IBinder
import android.provider.MediaStore
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.musicplayer.R
import com.example.musicplayer.data.model.Song
import com.example.musicplayer.data.service.MusicService
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class HomeViewModel(application: Application) : AndroidViewModel(application) {
    private val _songList = MutableStateFlow<List<Song>>(emptyList())
    val songList: StateFlow<List<Song>> = _songList

    private val _currentPosition = MutableStateFlow(0)
    val currentPosition: StateFlow<Int> = _currentPosition

    private val context: Context = getApplication<Application>().applicationContext

    private val _duration = MutableStateFlow(0)
    val duration: StateFlow<Int> = _duration

    private val _isPlaying = MutableStateFlow(false)
    val isPlaying: StateFlow<Boolean> = _isPlaying

    private val _selectedSongIndex = MutableStateFlow(-1)
    val selectedSongIndex: StateFlow<Int> = _selectedSongIndex

    private var musicService: MusicService? = null
    private var isBound = false

    private val serviceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            val binder = service as MusicService.MusicBinder
            musicService = binder.getService()
            isBound = true
            observeMusicService()
        }

        override fun onServiceDisconnected(name: ComponentName?) {
            musicService = null
            isBound = false
        }
    }

    init {
        fetchSongList(application)
        val intent = Intent(application, MusicService::class.java)
        application.bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)
    }

    private fun fetchSongList(application: Application) {
        viewModelScope.launch {
            val songList = mutableListOf<Song>()
            val projection = arrayOf(
                MediaStore.Audio.Media._ID,
                MediaStore.Audio.Media.TITLE,
                MediaStore.Audio.Media.ARTIST,
                MediaStore.Audio.Media.ALBUM,
                MediaStore.Audio.Media.DURATION,
                MediaStore.Audio.Media.DATA,
            )
            val selection = "${MediaStore.Audio.Media.IS_MUSIC} != 0"
            val sortOrder = "${MediaStore.Audio.Media.TITLE} ASC"

            val query = application.contentResolver.query(
                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
                projection,
                selection,
                null,
                sortOrder
            )

            query?.use { cursor ->
                val idColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media._ID)
                val titleColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.TITLE)
                val artistColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.ARTIST)
                val albumColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.ALBUM)
                val durationColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DURATION)
                val dataColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA)

                while (cursor.moveToNext()) {
                    val id = cursor.getLong(idColumn)
                    val title = cursor.getString(titleColumn)
                    val artist = cursor.getString(artistColumn)
                    val album = cursor.getString(albumColumn)
                    val duration = cursor.getLong(durationColumn)
                    val data = cursor.getString(dataColumn)

                    val contentUri: Uri = ContentUris.withAppendedId(
                        MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
                        id
                    )

                    val bitmap = getAlbumArt(application, contentUri)
                    Log.d("HomeViewModel", "Song fetched: $title by $artist")

                    songList.add(
                        Song(
                            id = id.toInt(),
                            name = title,
                            singerName = artist,
                            image = bitmap,
                            path = data,
                            album = album,
                            duration = duration
                        )
                    )
                }
            }
            _songList.value = songList
            musicService?.setSongList(songList)
            Log.d("HomeViewModel", "Total songs fetched: ${songList.size}")
        }
    }

    @SuppressLint("DefaultLocale")
    fun formatDuration(duration: Long): String {
        val minutes = (duration / 1000) / 60
        val seconds = (duration / 1000) % 60
        return String.format("%02d:%02d", minutes, seconds)
    }

    fun getAlbumArt(context: Context, uri: Uri): Bitmap {
        val mmr = MediaMetadataRetriever()
        mmr.setDataSource(context, uri)
        val data = mmr.embeddedPicture
        return if (data != null) {
            BitmapFactory.decodeByteArray(data, 0, data.size)
        } else {
            BitmapFactory.decodeResource(context.resources, R.drawable.ic_launcher_foreground)
        }
    }

    fun playSong(index: Int) {
        _selectedSongIndex.value = index
        musicService?.playSong(songList.value[index])
        _isPlaying.value = musicService?.isPlaying() ?: false
        _duration.value = musicService?.mediaPlayer?.duration ?: 0
    }

    fun togglePlayPause() {
        musicService?.togglePlayPause()
        _isPlaying.value = musicService?.isPlaying() ?: false
    }

    fun playPrevious() {
        val currentIndex = _selectedSongIndex.value
        if (currentIndex > 0) {
            playSong(currentIndex - 1)
        }
    }

    fun playNext() {
        val currentIndex = _selectedSongIndex.value
        if (currentIndex < songList.value.size - 1) {
            playSong(currentIndex + 1)
        }
    }

    fun seekTo(position: Int) {
        musicService?.seekTo(position)
    }

    fun forwardTenSeconds() {
        val currentPosition = musicService?.mediaPlayer?.currentPosition ?: 0
        musicService?.seekTo(currentPosition + 10000)
    }

    fun backwardTenSeconds() {
        val currentPosition = musicService?.mediaPlayer?.currentPosition ?: 0
        musicService?.seekTo(currentPosition - 10000)
    }

    private fun observeMusicService() {
        viewModelScope.launch {
            while (true) {
                musicService?.let {
                    _currentPosition.value = it.mediaPlayer?.currentPosition ?: 0
                    delay(1000) // Update every second
                }
            }
        }
    }

    override fun onCleared() {
        super.onCleared()
        if (isBound) {
            context.unbindService(serviceConnection)
            isBound = false
        }
    }
}


---------------------------------------------------------------------------------------------


import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.os.Bundle
import android.os.IBinder
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    private lateinit var musicService: MusicService
    private var isBound = false

    private val serviceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            val binder = service as MusicService.MusicBinder
            musicService = binder.getService()
            isBound = true
            observeServiceState()
        }

        override fun onServiceDisconnected(name: ComponentName?) {
            isBound = false
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Bind to MusicService
        Intent(this, MusicService::class.java).also { intent ->
            bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)
        }
    }

    private fun observeServiceState() {
        lifecycleScope.launch {
            // Observe play/pause state
            musicService.isPlaying.collect { isPlaying ->
                // Update your play/pause icon based on isPlaying value
                updatePlayPauseIcon(isPlaying)
            }
        }
    }

    private fun updatePlayPauseIcon(isPlaying: Boolean) {
        // Update the play/pause icon in your UI (Home Screen and Bottom Sheet)
        // For example:
        // playPauseButton.setImageResource(if (isPlaying) R.drawable.pause else R.drawable.play)
    }

    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        // Handle the intent and update UI accordingly
        handleIntent(intent)
    }

    private fun handleIntent(intent: Intent?) {
        // Extract necessary data from the intent and update the UI
        // For example, update the Bottom Sheet with the currently playing song
    }

    override fun onDestroy() {
        super.onDestroy()
        if (isBound) {
            unbindService(serviceConnection)
            isBound = false
        }
    }
}

package com.example.musicplayer.data.service

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.graphics.BitmapFactory
import android.media.MediaPlayer
import android.os.Binder
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat
import androidx.media.app.NotificationCompat.MediaStyle
import com.example.musicplayer.MainActivity
import com.example.musicplayer.R
import com.example.musicplayer.data.model.Song
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class MusicService : Service() {

    private val binder = MusicBinder()
    var mediaPlayer: MediaPlayer? = null
    private var currentSong: Song? = null
    private var songList: List<Song> = emptyList()
    private var currentSongIndex = -1
    private val scope = CoroutineScope(Dispatchers.Main + Job())
    private val _currentPosition = MutableStateFlow(0)
    val currentPosition: StateFlow<Int> = _currentPosition
    private val _isPlaying = MutableStateFlow(false)
    val isPlaying: StateFlow<Boolean> = _isPlaying

    companion object {
        const val ACTION_PLAY = "ACTION_PLAY"
        const val ACTION_PAUSE = "ACTION_PAUSE"
        const val ACTION_NEXT = "ACTION_NEXT"
        const val ACTION_PREVIOUS = "ACTION_PREVIOUS"
    }

    override fun onBind(intent: Intent?): IBinder {
        return binder
    }

    inner class MusicBinder : Binder() {
        fun getService(): MusicService = this@MusicService
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            ACTION_PLAY -> playPauseSong()
            ACTION_PAUSE -> playPauseSong()
            ACTION_NEXT -> playNext()
            ACTION_PREVIOUS -> playPrevious()
        }
        return START_NOT_STICKY
    }

    fun playSong(song: Song) {
        currentSong = song
        currentSongIndex = songList.indexOf(song)
        mediaPlayer?.reset()
        mediaPlayer = MediaPlayer().apply {
            setDataSource(song.path)
            prepare()
            start()
            setOnCompletionListener {
                stopSelf()
            }
        }
        _isPlaying.value = true
        showNotification()
        updateProgress()
    }

    fun togglePlayPause() {
        mediaPlayer?.let {
            if (it.isPlaying) {
                it.pause()
                _isPlaying.value = false
            } else {
                it.start()
                _isPlaying.value = true
            }
            showNotification()
        }
    }

    private fun playSongAtIndex(index: Int) {
        if (index >= 0 && index < songList.size) {
            playSong(songList[index])
        }
    }

    private fun playPauseSong() {
        togglePlayPause()
    }

    fun isPlaying(): Boolean {
        return mediaPlayer?.isPlaying ?: false
    }

    fun seekTo(position: Int) {
        mediaPlayer?.seekTo(position)
    }

    private fun playNext() {
        if (currentSongIndex < songList.size - 1) {
            playSongAtIndex(currentSongIndex + 1)
        }
    }

    private fun playPrevious() {
        if (currentSongIndex > 0) {
            playSongAtIndex(currentSongIndex - 1)
        }
    }

    private fun updateProgress() {
        scope.launch {
            while (isPlaying()) {
                _currentPosition.value = mediaPlayer?.currentPosition ?: 0
                delay(1000)
            }
        }
    }

    private fun showNotification() {
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                "music_channel",
                "Music Playback",
                NotificationManager.IMPORTANCE_LOW
            )
            notificationManager.createNotificationChannel(channel)
        }

        val playPauseAction = NotificationCompat.Action(
            if (mediaPlayer?.isPlaying == true) R.drawable.pause else R.drawable.play,
            if (mediaPlayer?.isPlaying == true) "Pause" else "Play",
            PendingIntent.getService(this, 0, Intent(this, MusicService::class.java).apply {
                action = if (mediaPlayer?.isPlaying == true) ACTION_PAUSE else ACTION_PLAY
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val nextSong = NotificationCompat.Action(
            R.drawable.next,
            "Next",
            PendingIntent.getService(this, 1, Intent(this, MusicService::class.java).apply {
                action = ACTION_NEXT
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val previousSong = NotificationCompat.Action(
            R.drawable.previous,
            "Previous",
            PendingIntent.getService(this, 2, Intent(this, MusicService::class.java).apply {
                action = ACTION_PREVIOUS
            }, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
        )

        val openMainActivityIntent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_CLEAR_TOP
        }
        val contentIntent = PendingIntent.getActivity(
            this,
            0,
            openMainActivityIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(this, "music_channel")
            .setContentTitle(currentSong?.name)
            .setContentText(currentSong?.singerName)
            .setSmallIcon(R.drawable.music)
            .setLargeIcon(currentSong?.image?.let { BitmapFactory.decodeFile(it.toString()) })
            .setContentIntent(contentIntent)
            .addAction(previousSong)
            .addAction(playPauseAction)
            .addAction(nextSong)
            .setStyle(MediaStyle().setShowActionsInCompactView(0, 1, 2))
            .build()

        startForeground(1, notification)
    }

    override fun onDestroy() {
        mediaPlayer?.release()
        mediaPlayer = null
        scope.cancel()
        super.onDestroy()
    }

    fun setSongList(songs: List<Song>) {
        songList = songs
    }
}
