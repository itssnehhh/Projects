package com.example.cpvocabvaultapp.data.model

data class WordDefinition(
    val word: String,
    val phonetics: List<Phonetic>,
    val meanings: List<Meaning>
)

data class Phonetic(
    val text: String,
    val audio: String
)

data class Meaning(
    val partOfSpeech: String,
    val definitions: List<Definition>
)

data class Definition(
    val definition: String,
    val example: String?,
    val synonyms: List<String>
)

package com.example.cpvocabvaultapp.data.network

import com.example.cpvocabvaultapp.data.model.WordDefinition
import retrofit2.http.GET
import retrofit2.http.Path

interface DictionaryApi {
    @GET("entries/en/{word}")
    suspend fun getWordDefinition(@Path("word") word: String): List<WordDefinition>
}

package com.example.cpvocabvaultapp.data.network

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object DictionaryInstance {
    private const val BASE_URL = "https://api.dictionaryapi.dev/api/v2/"

    val api: DictionaryApi by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(DictionaryApi::class.java)
    }
}

package com.example.cpvocabvaultapp.ui.screen

import android.media.MediaPlayer
import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import com.example.cpvocabvaultapp.viewModel.DictionaryViewModel
import kotlinx.coroutines.launch

@Composable
fun DictionaryApp(viewModel: DictionaryViewModel) {
    val context = LocalContext.current
    val wordDefinition by viewModel.wordDefinition.collectAsState()
    val loading by viewModel.loading.collectAsState()
    var searchQuery by remember { mutableStateOf(TextFieldValue("")) }
    val scope = rememberCoroutineScope()

    fun playAudio(url: String?) {
        if (url == null || url.isEmpty()) {
            Log.e("DictionaryApp", "Audio URL is null or empty")
            return
        }
        try {
            val mediaPlayer = MediaPlayer().apply {
                setDataSource(url)
                prepare()
                start()
            }
            mediaPlayer.setOnCompletionListener {
                it.release()
            }
        } catch (e: Exception) {
            Log.e("DictionaryApp", "Error playing audio", e)
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        OutlinedTextField(
            value = searchQuery,
            onValueChange = {
                searchQuery = it
                viewModel.searchWord(it.text)
            },
            label = { Text("Search for a word") },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        if (loading) {
            CircularProgressIndicator()
        } else {
            wordDefinition?.let { definitions ->
                val firstDefinition = definitions.firstOrNull()
                firstDefinition?.let { definition ->
                    Text("Word: ${definition.word}")

                    Spacer(modifier = Modifier.height(16.dp))

                    definition.phonetics.forEach { phonetic ->
                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Text("Pronunciation: ${phonetic.text}")
                            Spacer(modifier = Modifier.width(8.dp))
                            IconButton(onClick = { scope.launch { playAudio(phonetic.audio) } }) {
                                Icon(Icons.Default.PlayArrow, contentDescription = "Play audio")
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    definition.meanings.forEachIndexed { index, meaning ->
                        Text("Part of Speech: ${meaning.partOfSpeech}")
                        meaning.definitions.forEachIndexed { defIndex, def ->
                            Text("${index + 1}.${defIndex + 1}) Definition: ${def.definition}")
                            def.example?.let { example -> Text("Example: $example") }
                            def.synonyms.takeIf { it.isNotEmpty() }?.let { synonyms ->
                                Text("Synonyms: ${synonyms.joinToString(", ")}")
                            }
                            Spacer(modifier = Modifier.height(8.dp))
                        }
                    }
                } ?: Text("No definitions found")
            }
        }
    }
}

package com.example.cpvocabvaultapp.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.cpvocabvaultapp.data.model.WordDefinition
import com.example.cpvocabvaultapp.data.network.DictionaryInstance
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class DictionaryViewModel : ViewModel() {

    private val _wordDefinition = MutableStateFlow<List<WordDefinition>?>(null)
    val wordDefinition: StateFlow<List<WordDefinition>?> get() = _wordDefinition

    private val _loading = MutableStateFlow(false)
    val loading: StateFlow<Boolean> get() = _loading

    private var searchJob: Job? = null

    fun searchWord(word: String) {
        searchJob?.cancel()
        searchJob = viewModelScope.launch {
            delay(300) // debounce time
            _loading.value = true
            try {
                val result = DictionaryInstance.api.getWordDefinition(word)
                _wordDefinition.value = result
            } catch (e: Exception) {
                _wordDefinition.value = null
            } finally {
                _loading.value = false
            }
        }
    }
}

package com.example.cpvocabvaultapp

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class DictionaryApp:Application()


package com.example.cpvocabvaultapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.cpvocabvaultapp.ui.screen.DictionaryApp
import com.example.cpvocabvaultapp.ui.theme.CPVocabVaultAppTheme
import com.example.cpvocabvaultapp.viewModel.DictionaryViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    private val dictionaryViewModel : DictionaryViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DictionaryApp(dictionaryViewModel)
        }
    }
}

package com.example.cpvocabvaultapp.viewModel

import com.example.cpvocabvaultapp.data.model.WordDefinition
import com.example.cpvocabvaultapp.data.network.DictionaryApi
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.TestCoroutineDispatcher
import kotlinx.coroutines.test.runBlockingTest
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.mockito.Mockito.mock
import org.mockito.Mockito.`when`

@ExperimentalCoroutinesApi
class DictionaryViewModelTest {

    @get:Rule
    val instantTaskExecutorRule = DictionaryTestRule()

    private val testDispatcher = TestCoroutineDispatcher()
    private lateinit var viewModel: DictionaryViewModel
    private val api = mock(DictionaryApi::class.java)

    @Before
    fun setUp() {
        viewModel = DictionaryViewModel()
    }

    @Test
    fun testSearchWord() = testDispatcher.runBlockingTest {
        val fakeResponse = listOf(WordDefinition("test", listOf(), listOf()))
        `when`(api.getWordDefinition("test")).thenReturn(fakeResponse)

        viewModel.searchWord("test")
        testScheduler.apply { advanceTimeBy(300); runCurrent() } // advance debounce time

        assertEquals(fakeResponse, viewModel.wordDefinition.value)
    }

    @Test
    fun testLoadingState() = testDispatcher.runBlockingTest {
        val fakeResponse = listOf(WordDefinition("test", listOf(), listOf()))
        `when`(api.getWordDefinition("test")).thenReturn(fakeResponse)

        viewModel.searchWord("test")
        assertTrue(viewModel.loading.value)
        testScheduler.apply { advanceTimeBy(300); runCurrent() } // advance debounce time

        assertFalse(viewModel.loading.value)
    }
}