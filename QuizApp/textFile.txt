1. 
package com.example.cpcontactkeeper.data.firebase

import com.example.cpcontactkeeper.data.model.Contact
import com.google.firebase.Firebase
import com.google.firebase.firestore.firestore
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow

object FirestoreService {
    private val db = Firebase.firestore
    private val contactsCollection = db.collection("contacts")

    fun getContacts(): Flow<List<Contact>> = callbackFlow {
        val listener = contactsCollection.addSnapshotListener { value, error ->
            if (error != null) {
                close(error)
                return@addSnapshotListener
            }
            val contacts = value?.toObjects(Contact::class.java) ?: listOf()
            trySend(contacts).isSuccess
        }
        awaitClose { listener.remove() }
    }

    suspend fun addContact(contact: Contact) {
        contactsCollection.add(contact)
    }

    suspend fun updateContact(contact: Contact) {
        contactsCollection.document(contact.id).set(contact)
    }

    suspend fun deleteContact(contactId: String) {
        contactsCollection.document(contactId).delete()
    }
}

2.
package com.example.cpcontactkeeper.data.model

data class Contact(
    val id: String = "",
    val name: String = "",
    val phoneNumber: List<String> = listOf(),
    val profileImage: String = "",
    val bloodGroup: String = "",
    val address: String = ""
)

3. 
package com.example.cpcontactkeeper.ui.screen

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import com.example.cpcontactkeeper.data.model.Contact
import com.example.cpcontactkeeper.viewModel.ContactViewModel

@Composable
fun AddContactScreen(
    viewModel: ContactViewModel,
    onSave: () -> Unit,
    onCancel: () -> Unit
) {
    var name by remember { mutableStateOf("") }
    var phoneNumbers by remember { mutableStateOf(listOf("")) }
    var profileImage by remember { mutableStateOf("") }
    var bloodGroup by remember { mutableStateOf("") }
    var address by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("Name") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        phoneNumbers.forEachIndexed { index, phoneNumber ->
            OutlinedTextField(
                value = phoneNumber,
                onValueChange = { newPhoneNumber ->
                    phoneNumbers = phoneNumbers.toMutableList().apply { this[index] = newPhoneNumber }
                },
                label = { Text("Phone Number ${index + 1}") },
                modifier = Modifier.fillMaxWidth(),
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone)
            )
            Spacer(modifier = Modifier.height(8.dp))
        }

        Button(
            onClick = {
                phoneNumbers = phoneNumbers + ""
            },
            modifier = Modifier.align(Alignment.End)
        ) {
            Text("Add Phone Number")
        }
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = profileImage,
            onValueChange = { profileImage = it },
            label = { Text("Profile Image URL") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = bloodGroup,
            onValueChange = { bloodGroup = it },
            label = { Text("Blood Group") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = address,
            onValueChange = { address = it },
            label = { Text("Address") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Button(onClick = onCancel) {
                Text("Cancel")
            }
            Button(onClick = {
                val newContact = Contact(
                    name = name,
                    phoneNumber = phoneNumbers,
                    profileImage = profileImage,
                    bloodGroup = bloodGroup,
                    address = address
                )
                viewModel.addContact(newContact)
                onSave()
            }) {
                Text("Save")
            }
        }
    }
}

4. 

package com.example.cpcontactkeeper.ui.screen

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.cpcontactkeeper.data.model.Contact
import com.example.cpcontactkeeper.viewModel.ContactViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ContactScreen(navController: NavHostController, viewModel: ContactViewModel) {

    val contacts by viewModel.contacts.collectAsState()

    Scaffold(
        topBar = { TopAppBar(title = { Text("Contacts") }) },
        floatingActionButton = {
            FloatingActionButton(onClick = {  navController.navigate("addContact")  }) {
                Icon(Icons.Default.Add, contentDescription = null)
            }
        }
    ) {
        LazyColumn(modifier = Modifier.padding(it)) {
            items(contacts) { contact ->
                ContactItem(contact = contact, onClick = { /* Show Contact Detail */ }, onDelete = { viewModel.deleteContact(contact.id) })
            }
        }
    }
}

@Composable
fun ContactItem(contact: Contact, onClick: () -> Unit, onDelete: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { onClick() },
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.padding(16.dp)
        ) {
            Column {
                Text(contact.name, style = MaterialTheme.typography.titleLarge)
                Text(contact.phoneNumber.joinToString(), style = MaterialTheme.typography.titleMedium)
            }
            IconButton(onClick = { onDelete() }) {
                Icon(Icons.Default.Delete, contentDescription = null)
            }
        }
    }
}


5. 
package com.example.cpcontactkeeper.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.cpcontactkeeper.data.firebase.FirestoreService
import com.example.cpcontactkeeper.data.model.Contact
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ContactViewModel : ViewModel() {
    private val _contacts = MutableStateFlow<List<Contact>>(emptyList())
    val contacts: StateFlow<List<Contact>> = _contacts

    init {
        viewModelScope.launch {
            FirestoreService.getContacts().collect {
                _contacts.value = it
            }
        }
    }

    fun addContact(contact: Contact) {
        viewModelScope.launch {
            FirestoreService.addContact(contact)
        }
    }

    fun updateContact(contact: Contact) {
        viewModelScope.launch {
            FirestoreService.updateContact(contact)
        }
    }

    fun deleteContact(contactId: String) {
        viewModelScope.launch {
            FirestoreService.deleteContact(contactId)
        }
    }
}

6. 
package com.example.cpcontactkeeper

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.cpcontactkeeper.ui.screen.AddContactScreen
import com.example.cpcontactkeeper.ui.screen.ContactScreen
import com.example.cpcontactkeeper.viewModel.ContactViewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {

            val viewModel = ContactViewModel()
           MyApp(viewModel)
        }
    }
}

@Composable
fun AppNavHost(navController: NavHostController, viewModel: ContactViewModel) {
    NavHost(navController, startDestination = "contacts") {
        composable("contacts") {
            ContactScreen(navController, viewModel)
        }
        composable("addContact") {
            AddContactScreen(
                viewModel = viewModel,
                onSave = { navController.popBackStack() },
                onCancel = { navController.popBackStack() }
            )
        }
    }
}

@Composable
fun MyApp(viewModel: ContactViewModel) {
    val navController = rememberNavController()
    AppNavHost(navController,viewModel)
}

