1. Gradle

dependencies {
    implementation "androidx.activity:activity-compose:1.4.0"
    implementation "androidx.compose.runtime:runtime-livedata:1.1.0-alpha01"
    implementation "androidx.compose.material:material:1.4.0"
    implementation "androidx.compose.material3:material3:1.0.0-beta01"
    implementation "androidx.compose.ui:ui-tooling:1.4.0"
    implementation "androidx.compose.ui:ui:1.4.0"
    implementation "androidx.compose.ui:ui-graphics:1.4.0"
    implementation "androidx.compose.foundation:foundation:1.4.0"
    implementation "androidx.compose.foundation:foundation-layout:1.4.0"
    implementation "androidx.compose.material3:material3-icons-extended:1.0.0-beta01"
    implementation "androidx.compose.runtime:runtime:1.4.0"
    implementation "androidx.compose.foundation:foundation-ripple:1.4.0"
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation "androidx.navigation:navigation-compose:2.4.0"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0'
    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.0'
    implementation 'com.google.firebase:firebase-analytics-ktx'
}


2. 
object Constants {
    const val ALARM_NOTIFICATION_ID = 1001
}

3. 
import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.SystemClock
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.standupreminder.Constants
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.*

class ReminderViewModel(private val context: Context) : ViewModel() {

    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager

    private var alarmOn = false
    private var reminderStartTime: Long = 0

    fun setAlarm(enabled: Boolean) {
        alarmOn = enabled
        if (enabled) {
            scheduleReminder()
        } else {
            cancelReminder()
        }
    }

    fun setReminderTime(hourOfDay: Int, minute: Int) {
        val calendar = Calendar.getInstance().apply {
            set(Calendar.HOUR_OF_DAY, hourOfDay)
            set(Calendar.MINUTE, minute)
            set(Calendar.SECOND, 0)
            if (timeInMillis <= System.currentTimeMillis()) {
                add(Calendar.DAY_OF_YEAR, 1)
            }
            reminderStartTime = timeInMillis
        }
    }

    private fun scheduleReminder() {
        viewModelScope.launch(Dispatchers.IO) {
            val alarmIntent = Intent(context, ReminderReceiver::class.java).let { intent ->
                PendingIntent.getBroadcast(context, 0, intent, 0)
            }
            alarmManager.setRepeating(
                AlarmManager.ELAPSED_REALTIME_WAKEUP,
                SystemClock.elapsedRealtime() + AlarmManager.INTERVAL_FIFTEEN_MINUTES,
                AlarmManager.INTERVAL_FIFTEEN_MINUTES,
                alarmIntent
            )
        }
    }

    private fun cancelReminder() {
        val alarmIntent = Intent(context, ReminderReceiver::class.java).let { intent ->
            PendingIntent.getBroadcast(context, 0, intent, 0)
        }
        alarmManager.cancel(alarmIntent)
    }
}


4. 
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.widget.Toast
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.example.standupreminder.Constants
import com.example.standupreminder.R

class ReminderReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        showReminderNotification(context)
    }

    private fun showReminderNotification(context: Context) {
        val builder = NotificationCompat.Builder(context, "reminder_channel")
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("Stand Up Reminder")
            .setContentText("It's time to stand up and walk around!")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)

        with(NotificationManagerCompat.from(context)) {
            notify(Constants.ALARM_NOTIFICATION_ID, builder.build())
        }
    }
}

5. 
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.standupreminder.ui.theme.StandUpReminderTheme
import java.util.*

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            StandUpReminderTheme {
                // A surface container using the 'background' color from the theme
                Surface(color = MaterialTheme.colors.background) {
                    MainScreen()
                }
            }
        }
    }
}

@Composable
fun MainScreen() {
    val viewModel: ReminderViewModel = viewModel()
    val context = LocalContext.current

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = "Stand Up Reminder") },
                backgroundColor = Color(0xFF45C5FF),
            )
        },
        content = {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                ToggleAlarmSection(viewModel)
                SetTimeSection(viewModel)
            }
        }
    )
}

@Composable
fun ToggleAlarmSection(viewModel: ReminderViewModel) {
    var alarmOn by remember { mutableStateOf(false) }

    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = "Alarm",
            style = MaterialTheme.typography.body1,
            modifier = Modifier.weight(1f)
        )
        Switch(
            checked = alarmOn,
            onCheckedChange = {
                alarmOn = it
                viewModel.setAlarm(it)
            },
            colors = SwitchDefaults.colors(checkedThumbColor = Color(0xFF45C5FF))
        )
    }
}

@Composable
fun SetTimeSection(viewModel: ReminderViewModel) {
    var selectedTime by remember { mutableStateOf(Calendar.getInstance()) }
    val context = LocalContext.current

    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = "Reminder Time",
            style = MaterialTheme.typography.body1,
            modifier = Modifier.weight(1f)
        )
        Button(
            onClick = {
                TimePickerDialog(
                    context,
                    { _, hourOfDay, minute ->
                        selectedTime.set(Calendar.HOUR_OF_DAY, hourOfDay)
                        selectedTime.set(Calendar.MINUTE, minute)
                        viewModel.setReminderTime(hourOfDay, minute)
                    },
                    selectedTime.get(Calendar.HOUR_OF_DAY),
                    selectedTime.get(Calendar.MINUTE),
                    true
                ).show()
            },
            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF45C5FF))
        ) {
            Text(text = "Set Time")
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    StandUpReminderTheme {
        MainScreen()
    }
}


6. 
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import androidx.core.app.NotificationManagerCompat

object NotificationHelper {
    fun createNotificationChannel(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "Reminder Channel"
            val descriptionText = "Channel for stand up reminders"
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel("reminder_channel", name, importance).apply {
                description = descriptionText
            }
            val notificationManager =
                context.getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
    }
}


7. 
NotificationHelper.createNotificationChannel(this)
<receiver android:name=".ReminderReceiver" />
