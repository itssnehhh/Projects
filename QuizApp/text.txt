2. DB Helper
package com.example.cpminionspeak.data.local

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper

class TranslationDatabaseHelper(context: Context) :
    SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    override fun onCreate(db: SQLiteDatabase) {
        val createTable = "CREATE TABLE $TABLE_NAME (" +
                "$COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "$COLUMN_ORIGINAL_TEXT TEXT, " +
                "$COLUMN_TRANSLATED_TEXT TEXT)"
        db.execSQL(createTable)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS $TABLE_NAME")
        onCreate(db)
    }

    companion object {
        const val DATABASE_NAME = "translations.db"
        const val DATABASE_VERSION = 1
        const val TABLE_NAME = "translations"
        const val COLUMN_ID = "id"
        const val COLUMN_ORIGINAL_TEXT = "originalText"
        const val COLUMN_TRANSLATED_TEXT = "translatedText"
    }
}

3. Model
data class Contents(
    val translated:String
)
package com.example.cpminionspeak.data.model

data class TranslationEntity(
    val id: Int,
    val originalText: String,
    val translatedText: String
)
package com.example.cpminionspeak.data.model

data class TranslationResponse(
    val contents: Contents
)



4. minion APi
package com.example.cpminionspeak.data.network

import com.example.cpminionspeak.data.model.TranslationResponse
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Query

interface MinionApi {
    @GET("translate/minion.json")
    suspend fun translate(@Query("text") text: String): TranslationResponse

    companion object {
        private const val BASE_URL = "https://api.funtranslations.com/"

        fun create(): MinionApi {
            return Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .build()
                .create(MinionApi::class.java)
        }
    }
}

5. Repository
package com.example.cpminionspeak.repository

import android.content.ContentValues
import android.content.Context
import com.example.cpminionspeak.data.local.TranslationDatabaseHelper
import com.example.cpminionspeak.data.model.TranslationEntity

class TranslationRepository(context: Context) {
    private val dbHelper = TranslationDatabaseHelper(context)

    fun saveTranslation(originalText: String, translatedText: String) {
        val db = dbHelper.writableDatabase
        val values = ContentValues().apply {
            put(TranslationDatabaseHelper.COLUMN_ORIGINAL_TEXT, originalText)
            put(TranslationDatabaseHelper.COLUMN_TRANSLATED_TEXT, translatedText)
        }
        db.insert(TranslationDatabaseHelper.TABLE_NAME, null, values)
    }

    fun getAllTranslations(): List<TranslationEntity> {
        val db = dbHelper.readableDatabase
        val cursor = db.query(
            TranslationDatabaseHelper.TABLE_NAME,
            null, null, null, null, null, null
        )
        val translations = mutableListOf<TranslationEntity>()
        with(cursor) {
            while (moveToNext()) {
                val id = getInt(getColumnIndexOrThrow(TranslationDatabaseHelper.COLUMN_ID))
                val originalText = getString(getColumnIndexOrThrow(TranslationDatabaseHelper.COLUMN_ORIGINAL_TEXT))
                val translatedText = getString(getColumnIndexOrThrow(TranslationDatabaseHelper.COLUMN_TRANSLATED_TEXT))
                translations.add(TranslationEntity(id, originalText, translatedText))
            }
        }
        cursor.close()
        return translations
    }

    fun deleteAllTranslations() {
        val db = dbHelper.writableDatabase
        db.delete(TranslationDatabaseHelper.TABLE_NAME, null, null)
    }

    fun deleteTranslation(id: Int) {
        val db = dbHelper.writableDatabase
        val selection = "${TranslationDatabaseHelper.COLUMN_ID} = ?"
        val selectionArgs = arrayOf(id.toString())
        db.delete(TranslationDatabaseHelper.TABLE_NAME, selection, selectionArgs)
    }
}



6. VIewModel

package com.example.cpminionspeak.viewModel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.cpminionspeak.data.model.TranslationEntity
import com.example.cpminionspeak.data.network.MinionApi
import com.example.cpminionspeak.repository.TranslationRepository
import kotlinx.coroutines.launch

class MainViewModel(application: Application) : AndroidViewModel(application) {
    private val translationRepository = TranslationRepository(application)
    private val minionApi = MinionApi.create()

    var translationText: String? = null

    fun translateText(text: String, onSuccess: (String) -> Unit) {
        viewModelScope.launch {
            try {
                val response = minionApi.translate(text)
                val translatedText = response.contents.translated
                onSuccess(translatedText)
                saveTranslation(text, translatedText)
            } catch (e: Exception) {
                // Handle error
            }
        }
    }

    private fun saveTranslation(originalText: String, translatedText: String) {
        translationRepository.saveTranslation(originalText, translatedText)
    }

    fun getHistory(onSuccess: (List<TranslationEntity>) -> Unit) {
        viewModelScope.launch {
            val history = translationRepository.getAllTranslations()
            onSuccess(history)
        }
    }

    fun clearHistory() {
        translationRepository.deleteAllTranslations()
    }
    fun deleteTranslation(id: Int) {
        viewModelScope.launch {
            translationRepository.deleteTranslation(id)
        }
    }
}


7. Main SCreen

class MainActivity : ComponentActivity() {

    private val viewModel : MainViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MainScreen(viewModel)
        }
    }
}


package com.example.cpminionspeak.screen

import androidx.compose.animation.AnimatedContentTransitionScope
import androidx.compose.animation.core.EaseIn
import androidx.compose.animation.core.EaseOut
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.cpminionspeak.Constant.HISTORY_SCREEN
import com.example.cpminionspeak.Constant.HOME_SCREEN
import com.example.cpminionspeak.viewModel.MainViewModel

@Composable
fun MainScreen(viewModel: MainViewModel) {
    val navController = rememberNavController()
    NavHostContainer(navController,viewModel)
}

@Composable
fun NavHostContainer(navController: NavHostController, viewModel: MainViewModel) {
    NavHost(navController = navController, startDestination = HOME_SCREEN) {
        composable(HOME_SCREEN) {
            HomeScreen(navController,viewModel)
        }
        composable(
            HISTORY_SCREEN,
            enterTransition = {
                fadeIn(
                    animationSpec = tween(
                        500,
                        easing = LinearEasing
                    )
                ) + slideIntoContainer(
                    animationSpec = tween(500, easing = EaseIn),
                    towards = AnimatedContentTransitionScope.SlideDirection.Start
                )
            },
            exitTransition = {
                fadeOut(animationSpec = tween(500, easing = EaseOut)) + slideOutOfContainer(
                    animationSpec = tween(500, easing = EaseOut),
                    towards = AnimatedContentTransitionScope.SlideDirection.End
                )
            }
        ) {
            HistoryScreen(viewModel)
        }
    }
}


8. Home Screen
package com.example.cpminionspeak.screen

import android.app.Application
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.cpminionspeak.Constant.HISTORY_SCREEN
import com.example.cpminionspeak.R
import com.example.cpminionspeak.viewModel.MainViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(navController: NavHostController, viewModel: MainViewModel) {

    var searchedText by rememberSaveable { mutableStateOf("") }
    var translatedText by rememberSaveable { mutableStateOf("") }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = TopAppBarDefaults.topAppBarColors(Color.Black),
                title = {
                    Text(
                        color = Color.White,
                        fontWeight = FontWeight.SemiBold,
                        text = stringResource(id = R.string.app_name),
                        style = MaterialTheme.typography.titleLarge
                    )
                }
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                containerColor = Color(0xFFFFEA02),
                onClick = { navController.navigate(HISTORY_SCREEN) },
                modifier = Modifier.padding(8.dp)
            ) {
                Icon(imageVector = Icons.Default.Search, contentDescription = "")
            }
        },
        content = { paddingValues ->
            Box(modifier = Modifier.padding(paddingValues)) {
                Image(
                    alpha = 0.8f,
                    contentScale = ContentScale.Crop,
                    painter = painterResource(id = R.drawable.minion_bg),
                    contentDescription = "",
                    modifier = Modifier.fillMaxSize()
                )
            }
            LazyColumn(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center,
                modifier = Modifier
                    .padding(paddingValues)
                    .fillMaxSize()
            ) {
                item {
                    TextField(
                        value = searchedText,
                        onValueChange = { searchedText = it },
                        colors = TextFieldDefaults.colors(
                            focusedContainerColor = Color.White,
                            unfocusedContainerColor = Color.White,
                            disabledContainerColor = Color.White
                        ),
                        label = { Text(text = "Enter the text") },
                        modifier = Modifier
                            .padding(horizontal = 16.dp)
                            .fillMaxWidth()
                    )

                    Button(
                        onClick = {
                            viewModel.translateText(searchedText) {
                                translatedText = it
                            }
                        },
                        colors = ButtonDefaults.buttonColors(Color(0xFF3CC3FF)),
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "Translate",
                            style = MaterialTheme.typography.titleMedium,
                            color = Color.Black
                        )
                    }

                    if (translatedText.isNotEmpty()) {
                        Text(
                            text = translatedText,
                            style = MaterialTheme.typography.titleMedium,
                            color = Color.Black,
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }
            }
        }
    )
}

@Preview
@Composable
fun HomeScreenPreview() {
    HomeScreen(
        navController = NavHostController(LocalContext.current),
        viewModel = MainViewModel(LocalContext.current.applicationContext as Application)
    )
}

9. Delete All
package com.example.cpminionspeak.screen

import android.app.Application
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.cpminionspeak.R
import com.example.cpminionspeak.data.model.TranslationEntity
import com.example.cpminionspeak.viewModel.MainViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HistoryScreen(viewModel: MainViewModel) {

    var historyList by remember { mutableStateOf(emptyList<TranslationEntity>()) }
    var showDialog by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        viewModel.getHistory { historyList = it }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = TopAppBarDefaults.topAppBarColors(Color.Black),
                title = {
                    Text(
                        color = Color.White,
                        fontWeight = FontWeight.SemiBold,
                        text = "History",
                        style = MaterialTheme.typography.titleLarge
                    )
                },
                navigationIcon = {
                    Icon(
                        modifier = Modifier.padding(8.dp),
                        tint = Color.Yellow,
                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                        contentDescription = ""
                    )
                },
                actions = {
                    Icon(
                        modifier = Modifier
                            .padding(8.dp)
                            .clickable { showDialog = true }
                            .size(32.dp),
                        imageVector = Icons.Default.Delete,
                        contentDescription = "",
                        tint = Color.Red
                    )
                }
            )
        },
        content = { paddingValues ->
            Box(modifier = Modifier.padding(paddingValues)) {
                Image(
                    alpha = 0.5f,
                    contentScale = ContentScale.Crop,
                    painter = painterResource(id = R.drawable.minion_bg),
                    contentDescription = "",
                    modifier = Modifier.fillMaxSize()
                )
            }
            LazyColumn(
                modifier = Modifier
                    .padding(paddingValues)
                    .fillMaxSize()
            ) {
                items(historyList) { item ->
                    HistoryCard(item)
                }
            }
        }
    )

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                TextButton(onClick = {
                    viewModel.clearHistory()
                    historyList = emptyList()
                    showDialog = false
                }) {
                    Text("Delete")
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("Cancel")
                }
            },
            title = { Text("Delete History") },
            text = { Text("Are you sure you want to delete all history?") }
        )
    }
}

@Composable
fun HistoryCard(item: TranslationEntity) {
    Card(
        elevation = CardDefaults.cardElevation(4.dp),
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        colors = CardDefaults.cardColors(Color.White)
    ) {
        Column(modifier = Modifier.padding(8.dp)) {
            Text(
                fontWeight = FontWeight.Bold,
                text = "Searched Text",
                style = MaterialTheme.typography.titleSmall
            )
            Text(
                text = item.originalText,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.size(8.dp))
            Text(
                fontWeight = FontWeight.Bold,
                text = "Translated Text",
                style = MaterialTheme.typography.titleSmall
            )
            Text(
                text = item.translatedText,
                style = MaterialTheme.typography.bodyLarge
            )
        }
    }
}

@Preview
@Composable
fun HistoryScreenPreview() {
    HistoryScreen(MainViewModel(Application()))
}


10. Delete By ID
package com.example.cpminionspeak.screen

import android.app.Application
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.cpminionspeak.R
import com.example.cpminionspeak.data.model.TranslationEntity
import com.example.cpminionspeak.viewModel.MainViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HistoryScreen(viewModel: MainViewModel) {

    var historyList by remember { mutableStateOf(emptyList<TranslationEntity>()) }
    var showDialog by remember { mutableStateOf(false) }
    var translationToDelete by remember { mutableStateOf<TranslationEntity?>(null) }

    LaunchedEffect(Unit) {
        viewModel.getHistory { historyList = it }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = TopAppBarDefaults.topAppBarColors(Color.Black),
                title = {
                    Text(
                        color = Color.White,
                        fontWeight = FontWeight.SemiBold,
                        text = "History",
                        style = MaterialTheme.typography.titleLarge
                    )
                },
                navigationIcon = {
                    Icon(
                        modifier = Modifier.padding(8.dp),
                        tint = Color.Yellow,
                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                        contentDescription = ""
                    )
                },
                actions = {
                    Icon(
                        modifier = Modifier
                            .padding(8.dp)
                            .clickable { showDialog = true }
                            .size(32.dp),
                        imageVector = Icons.Default.Delete,
                        contentDescription = "",
                        tint = Color.Red
                    )
                }
            )
        },
        content = { paddingValues ->
            Box(modifier = Modifier.padding(paddingValues)) {
                Image(
                    alpha = 0.5f,
                    contentScale = ContentScale.Crop,
                    painter = painterResource(id = R.drawable.minion_bg),
                    contentDescription = "",
                    modifier = Modifier.fillMaxSize()
                )
            }
            LazyColumn(
                modifier = Modifier
                    .padding(paddingValues)
                    .fillMaxSize()
            ) {
                items(historyList) { item ->
                    HistoryCard(item, onDelete = {
                        translationToDelete = it
                        showDialog = true
                    })
                }
            }
        }
    )

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                TextButton(onClick = {
                    translationToDelete?.let {
                        viewModel.deleteTranslation(it.id)
                        historyList = historyList.filterNot { it.id == translationToDelete?.id }
                        translationToDelete = null
                    }
                    showDialog = false
                }) {
                    Text("Delete")
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("Cancel")
                }
            },
            title = { Text("Delete Translation") },
            text = { Text("Are you sure you want to delete this translation?") }
        )
    }
}

@Composable
fun HistoryCard(item: TranslationEntity, onDelete: (TranslationEntity) -> Unit) {
    Card(
        elevation = CardDefaults.cardElevation(4.dp),
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        colors = CardDefaults.cardColors(Color.White)
    ) {
        Column(modifier = Modifier.padding(8.dp)) {
            Text(
                fontWeight = FontWeight.Bold,
                text = "Searched Text",
                style = MaterialTheme.typography.titleSmall
            )
            Text(
                text = item.originalText,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.size(8.dp))
            Text(
                fontWeight = FontWeight.Bold,
                text = "Translated Text",
                style = MaterialTheme.typography.titleSmall
            )
            Text(
                text = item.translatedText,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.size(8.dp))
            TextButton(onClick = { onDelete(item) }) {
                Text("Delete", color = Color.Red)
            }
        }
    }
}
@Preview
@Composable
fun HistoryScreenPreview() {
    HistoryScreen(MainViewModel(Application()))
}