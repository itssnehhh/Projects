package com.example.cpstoremateapplication.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.cpstoremateapplication.data.model.FavouriteProduct
import com.example.cpstoremateapplication.data.model.Product
import com.example.cpstoremateapplication.data.repository.FavouriteProductRepository
import com.example.cpstoremateapplication.data.repository.ProductRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ProductViewModel @Inject constructor(
    private val productRepository: ProductRepository,
    private val favRepository: FavouriteProductRepository,
) : ViewModel() {

    private val _productDetail = MutableStateFlow<Product?>(null)
    val productDetail: StateFlow<Product?> = _productDetail


    val offlineProductList: Flow<List<Product>>
        get() =  productRepository.offlineProductList

    init { getProducts() }

    fun getProducts() {
        viewModelScope.launch {
            try {
                val product = productRepository.getProductList()
                productRepository.insertProduct(product)
            } catch (e: Exception) {
                println(e.message)
            }
        }
    }

    fun getProductDetail(productId: Int) {
        viewModelScope.launch {
            _productDetail.value = productRepository.getProductDetail(productId)
        }
    }

    val allFavProduct: Flow<List<FavouriteProduct>>
    get() = favRepository.favouriteProductList

    fun insert(favouriteProduct: FavouriteProduct) = viewModelScope.launch {
        favRepository.insert(favouriteProduct)
    }

    fun deleteFavList(favouriteProduct: List<FavouriteProduct>) =
        viewModelScope.launch {
            favRepository.deleteFavList(favouriteProduct)
        }

    fun remove(favouriteProduct: FavouriteProduct) =
        viewModelScope.launch {
            favRepository.delete(favouriteProduct)
        }

    suspend fun isFavorite(productId: Int): Boolean {
        return favRepository.isFavorite(productId)
    }

    fun deleteProduct(product: Product) {
        viewModelScope.launch {
            productRepository.deleteProduct(product)
        }
    }
}

package com.example.cpstoremateapplication.viewModel

import com.example.cpstoremateapplication.data.model.FavouriteProduct
import com.example.cpstoremateapplication.data.model.Product
import com.example.cpstoremateapplication.data.model.Rating
import com.example.cpstoremateapplication.data.repository.FavouriteProductRepository
import com.example.cpstoremateapplication.data.repository.ProductRepository
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.flow.toList
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.test.runTest
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.mockito.Mockito.mock
import org.mockito.Mockito.`when`

@ExperimentalCoroutinesApi
class ProductViewModelTest {

    @get:Rule
    val productTestRule = TestRule()

    private val productRepository = mock<ProductRepository>()
    private val favProductRepository = mock<FavouriteProductRepository>()

    private lateinit var productViewModel: ProductViewModel

    @Before
    fun setUp() {
        productViewModel = ProductViewModel(productRepository, favProductRepository)
    }


    @Test
    fun getProducts() = runTest {
        val products = listOf(
            Product(
                1,
                "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
                "109.95",
                "Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday",
                "men's clothing",
                "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
                Rating(3.9f, 120)
            )
        )
        `when`(productRepository.offlineProductList).thenReturn(flowOf(products))
        val product = productViewModel.offlineProductList.toList()
        assertEquals(products, product[0])
    }

    @Test
    fun getProductDetail() = runTest {
        val product = Product(
            1,
            "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
            "109.95",
            "Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday",
            "men's clothing",
            "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
            Rating(3.9f, 120)
        )
        `when`(productRepository.getProductDetail(1)).thenReturn(product)
        productViewModel.getProductDetail(1)
        val productDetail = productViewModel.productDetail.first()
        assertEquals(product, productDetail)
    }

    @Test
    fun getAllFavProduct() = runTest {
        val favouriteProduct = listOf(
            FavouriteProduct(
                productId = 1,
                title = "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
                price = "109.95",
                image = "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"
            )
        )
        `when`(favProductRepository.favouriteProductList).thenReturn(flowOf(favouriteProduct))
        val favProduct = productViewModel.allFavProduct.toList()
        assertEquals(favouriteProduct, favProduct[0])

    }

    @Test
    fun insert() = runTest {
        val favouriteProduct = FavouriteProduct(
            productId = 1,
            title = "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
            price = "109.95",
            image = "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"
        )
        `when`(favProductRepository.favouriteProductList).thenReturn(flowOf(listOf(favouriteProduct)))
        productViewModel.insert(favouriteProduct)
        val favProduct = productViewModel.allFavProduct.first()
        assertEquals(listOf(favouriteProduct), favProduct)
    }

    @Test
    fun deleteFavList() = runTest {
        val favouriteProduct = listOf(
            FavouriteProduct(
                productId = 1,
                title = "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
                price = "109.95",
                image = "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"
            )
        )
        `when`(favProductRepository.favouriteProductList).thenReturn(flowOf(emptyList()))
        productViewModel.deleteFavList(favouriteProduct)
        val product = productViewModel.allFavProduct.first()
        assertEquals(emptyList<FavouriteProduct>(), product)
    }

    @Test
    fun remove() = runTest {
        val favouriteProduct = FavouriteProduct(
            productId = 1,
            title = "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
            price = "109.95",
            image = "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"
        )
        `when`(favProductRepository.favouriteProductList).thenReturn(flowOf(emptyList()))
        productViewModel.remove(favouriteProduct)
        val product = productViewModel.allFavProduct.first()
        assertEquals(listOf<FavouriteProduct>(), product)
    }

    @Test
    fun isFavorite() = runTest {
        val productId = 1
        val expected = true

        `when`(favProductRepository.isFavorite(productId)).thenReturn(true)
        val result = runBlocking { productViewModel.isFavorite(productId) }
        assertEquals(expected, result)
    }

    @Test
    fun deleteProduct() = runTest {

        val deleteProduct = Product(
            1,
            "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
            "109.95",
            "Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday",
            "men's clothing",
            "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
            Rating(3.9f, 120)
        )
        `when`(productRepository.deleteProduct(deleteProduct)).thenReturn(Unit)
        `when`(productRepository.offlineProductList).thenReturn(flowOf(emptyList()))
        productViewModel.deleteProduct(deleteProduct)
        val product = productViewModel.offlineProductList.first()
        assertEquals(emptyList<Product>(),product)
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navController: NavHostController,
    productViewModel: ProductViewModel,
) {
    val productList by productViewModel.offlineProductList.collectAsState(emptyList())



@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FavouriteScreen(viewModel: ProductViewModel) {

    val productList by viewModel.allFavProduct.collectAsState(emptyList())
    var isEnabled by remember { mutableStateOf(false) }
    var selectedItems by remember { mutableStateOf<Set<Int>>(emptySet()) }

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProductDetailScreen(
    navController: NavHostController,
    productViewModel: ProductViewModel,
    productId: Int?,
) {

    val product by productViewModel.productDetail.collectAsState()
    var message by remember { mutableStateOf("") }
    var isLiked by rememberSaveable { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        isLiked = product?.let { productViewModel.isFavorite(it.id) } == true
    }
