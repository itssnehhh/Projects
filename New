private fun saveImageToGallery(
    context: Context,
    body: ResponseBody,
    onProgressUpdate: (Int) -> Unit,
    onCancel: () -> Unit,
): String? {
    val contentResolver = context.contentResolver
    val filename = "downloaded_image.jpg"
    val mimeType = "image/jpeg"
    val directory = Environment.DIRECTORY_PICTURES

    val contentValues = ContentValues().apply {
        put(MediaStore.MediaColumns.DISPLAY_NAME, filename)
        put(MediaStore.MediaColumns.MIME_TYPE, mimeType)
        put(MediaStore.MediaColumns.RELATIVE_PATH, directory)
    }

    val uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)
    return uri?.let {
        try {
            val fileSize = body.contentLength()
            var totalBytesRead: Long = 0
            val buffer = ByteArray(4096)
            val inputStream = body.byteStream()
            val outputStream = contentResolver.openOutputStream(it)

            outputStream?.use { output ->
                inputStream.use { input ->
                    while (true) {
                        val bytesRead = input.read(buffer)
                        if (bytesRead == -1) break
                        totalBytesRead += bytesRead
                        output.write(buffer, 0, bytesRead)

                        val progress = (totalBytesRead * 100 / fileSize).toInt()
                        onProgressUpdate(progress)
                        showNotification(context, "Downloading...", "$progress%")
                    }
                    output.flush()
                }
            }
            inputStream.close()
            it.toString()
        } catch (e: IOException) {
            Log.e("DownloadUtils", "Failed to save image: ${e.message}", e)
            null
        }
    }
}
