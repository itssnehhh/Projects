package com.example.cpdrinkexplorer.data.model

data class Cocktail(
    val idDrink: String,
    val strDrink: String,
    val strInstructions: String,
    val strDrinkThumb: String,
    val strIngredient1: String?,
    val strIngredient2: String?,
    val strIngredient3: String?,
    val strIngredient4: String?,
    val strIngredient5: String?,
    val strIngredient6: String?,
    val strIngredient7: String?,
    val strIngredient8: String?,
    val strIngredient9: String?,
    val strIngredient10: String?,
    val strIngredient11: String?,
    val strIngredient12: String?,
    val strIngredient13: String?,
    val strIngredient14: String?,
    val strIngredient15: String?,
    val strMeasure1: String?,
    val strMeasure2: String?,
    val strMeasure3: String?,
    val strMeasure4: String?,
    val strMeasure5: String?,
    val strMeasure6: String?,
    val strMeasure7: String?,
    val strMeasure8: String?,
    val strMeasure9: String?,
    val strMeasure10: String?,
    val strMeasure11: String?,
    val strMeasure12: String?,
    val strMeasure13: String?,
    val strMeasure14: String?,
    val strMeasure15: String?
) {
    val ingredients: List<String>
        get() = listOfNotNull(
            strIngredient1,
            strIngredient2,
            strIngredient3,
            strIngredient4,
            strIngredient5,
            strIngredient6,
            strIngredient7,
            strIngredient8,
            strIngredient9,
            strIngredient10,
            strIngredient11,
            strIngredient12,
            strIngredient13,
            strIngredient14,
            strIngredient15
        )

    val measures: List<String>
        get() = listOfNotNull(
            strMeasure1,
            strMeasure2,
            strMeasure3,
            strMeasure4,
            strMeasure5,
            strMeasure6,
            strMeasure7,
            strMeasure8,
            strMeasure9,
            strMeasure10,
            strMeasure11,
            strMeasure12,
            strMeasure13,
            strMeasure14,
            strMeasure15
        )
}


2. Service

interface DrinkApiService {

    @GET("search.php")
    suspend fun getSearchedDrink(@Query("s") search: String): CocktailResponse

    @GET("lookup.php")
    suspend fun getDrinkDetails(@Query("i") search: String): CocktailDetailResponse

}

3. Client

object RetrofitInstance {
    private const val BASE_URL = "https://www.thecocktaildb.com/api/json/v1/1/"

    private val okHttpClient = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS) // Adjust timeout duration as needed
        .readTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .build()

    private val retrofit = Retrofit.Builder()
        .baseUrl(BASE_URL)
        .client(okHttpClient)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    val api: DrinkApiService by lazy {
        retrofit.create(DrinkApiService::class.java)
    }
}


4. Repo
class MocktailRepository {
    suspend fun searchMocktails(query: String) = RetrofitInstance.api.getSearchedDrink(query)
    suspend fun getMocktailDetails(id: String) = RetrofitInstance.api.getDrinkDetails(id)
}

5. ViewModel

class MocktailViewModel : ViewModel() {
    private val repository = MocktailRepository()
    private val _mocktails = MutableStateFlow<List<Cocktail>>(emptyList())
    val mocktails: StateFlow<List<Cocktail>> = _mocktails

    private val _selectedMocktail = MutableStateFlow<Cocktail?>(null)
    val selectedMocktail: StateFlow<Cocktail?> = _selectedMocktail

    init {
        searchMocktails("vodka")
    }

    fun searchMocktails(query: String) {
        viewModelScope.launch {
            val response = repository.searchMocktails(query)
            _mocktails.value = response.drinks
        }
    }

    fun selectMocktail(id: String) {
        viewModelScope.launch {
            val response = repository.getMocktailDetails(id)
            _selectedMocktail.value = response.drinks.firstOrNull()
        }
    }
}

6. Main Activity

class MainActivity : ComponentActivity() {

    private val viewModel: MocktailViewModel by viewModels()
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MocktailApp(viewModel)
        }
    }
}

@Composable
fun MocktailApp(viewModel: MocktailViewModel) {
    val mocktails by viewModel.mocktails.collectAsState()
    val selectedMocktail by viewModel.selectedMocktail.collectAsState()
    Surface(color = MaterialTheme.colorScheme.background) {
        Column(modifier = Modifier.fillMaxSize()) {
            SearchBar { query ->
                viewModel.searchMocktails(query)
            }
            MocktailList(mocktails) { id ->
                viewModel.selectMocktail(id)
            }
            selectedMocktail?.let { mocktail ->
                MocktailDetail(mocktail)
            }
        }
    }
}

@Composable
fun SearchBar(onSearch: (String) -> Unit) {
    var text by remember { mutableStateOf("vodka") }
    Row(modifier = Modifier
        .fillMaxWidth()
        .padding(16.dp)) {
        BasicTextField(
            value = text,
            onValueChange = {
                text = it
                onSearch(it)
            },
            modifier = Modifier
                .weight(1f)
                .padding(8.dp)
        )
    }
}

@Composable
fun MocktailList(mocktails: List<Cocktail>, onItemClick: (String) -> Unit) {
    if (mocktails != null) {
        Column {
            mocktails.forEach { mocktail ->
                MocktailListItem(mocktail) {
                    onItemClick(mocktail.idDrink)
                }
            }
        }
    } else {
        Text(text = "No mocktails available", style = MaterialTheme.typography.headlineMedium)
    }
}

@Composable
fun MocktailListItem(mocktail: Cocktail, onClick: () -> Unit) {
    Row(modifier = Modifier
        .fillMaxWidth()
        .padding(16.dp)
        .clickable { onClick() }) {
        Image(
            painter = rememberImagePainter(data = mocktail.strDrinkThumb ?: R.drawable.ic_launcher_background),
            contentDescription = null,
            modifier = Modifier.size(64.dp),
            contentScale = ContentScale.Crop
        )
        Spacer(modifier = Modifier.width(16.dp))
        Text(text = mocktail.strDrink, style = MaterialTheme.typography.bodyMedium)
    }
}

@Composable
fun MocktailDetail(mocktail: Cocktail) {
    Column(modifier = Modifier.padding(16.dp)) {
        Text(text = mocktail.strDrink, style = MaterialTheme.typography.headlineSmall)
        Spacer(modifier = Modifier.height(8.dp))
        Text(text = "Ingredients:", style = MaterialTheme.typography.headlineSmall)
        Text(text = "- ${mocktail.strIngredient1}")
        Text(text = "- ${mocktail.strIngredient2}")
        Text(text = "- ${mocktail.strIngredient3}")
        Text(text = "- ${mocktail.strIngredient4}")
        Spacer(modifier = Modifier.height(8.dp))
        Text(text = "Instructions:", style = MaterialTheme.typography.headlineMedium)
        Text(text = mocktail.strInstructions)
    }
}
