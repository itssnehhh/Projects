1. class MainViewModel(application: Application) : AndroidViewModel(application) {
    private val productService = RetrofitClient.createService(ProductService::class.java)
    private val favoriteProductDao = AppDatabase.getDatabase(application).favoriteProductDao()

    val products: MutableState<List<Product>> = mutableStateOf(emptyList())
    val favoriteProducts: MutableState<List<FavoriteProduct>> = mutableStateOf(emptyList())

    init {
        fetchProductsFromDatabase()
        fetchProductsFromApi()
        fetchFavoriteProducts()
    }

    private fun fetchProductsFromDatabase() {
        viewModelScope.launch {
            favoriteProductDao.getFavoriteProducts().collect {
                favoriteProducts.value = it
            }
        }
    }

    private fun fetchProductsFromApi() {
        viewModelScope.launch {
            try {
                val remoteProducts = productService.getProducts()
                // Update local database with remote data
                updateLocalDatabase(remoteProducts)
            } catch (e: Exception) {
                Log.e("MainViewModel", "Failed to fetch products from API", e)
            }
        }
    }

    private suspend fun updateLocalDatabase(remoteProducts: List<Product>) {
        // Convert remote products to favorite products and update database
        val favoriteProductsToUpdate = remoteProducts.map { it.toFavoriteProduct() }
        favoriteProductDao.removeAllFavoriteProducts()
        favoriteProductDao.addFavoriteProducts(favoriteProductsToUpdate)
    }

    fun toggleFavorite(product: Product) {
        viewModelScope.launch {
            if (product.isFavorite) {
                favoriteProductDao.removeFavoriteProduct(product.toFavoriteProduct())
            } else {
                favoriteProductDao.addFavoriteProduct(product.toFavoriteProduct())
            }
        }
    }

    private fun Product.toFavoriteProduct(): FavoriteProduct {
        return FavoriteProduct(id, title, description, category, price, image)
    }
}


2. 
@Database(entities = [FavoriteProduct::class], version = 1)
abstract class AppDatabase : RoomDatabase() {
    abstract fun favoriteProductDao(): FavoriteProductDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "app_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
}

// DAO for FavoriteProduct
@Dao
interface FavoriteProductDao {
    @Query("SELECT * FROM favorites")
    fun getFavoriteProducts(): Flow<List<FavoriteProduct>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun addFavoriteProduct(product: FavoriteProduct)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun addFavoriteProducts(products: List<FavoriteProduct>)

    @Delete
    suspend fun removeFavoriteProduct(product: FavoriteProduct)

    @Query("DELETE FROM favorites")
    suspend fun removeAllFavoriteProducts()
}


3. 

interface ProductService {
    @GET("products")
    suspend fun getProducts(): List<Product>
}


4. 

@Composable
fun HomeScreen(viewModel: MainViewModel) {
    val favoriteProducts by viewModel.favoriteProducts.collectAsState()

    LazyVerticalGrid(cells = GridCells.Fixed(2)) {
        items(favoriteProducts) { product ->
            ProductItem(product = product) {
                viewModel.toggleFavorite(product)
            }
        }
    }
}

@Composable
fun ProductItem(product: FavoriteProduct, onToggleFavorite: () -> Unit) {
    // UI for each product item
}

@Composable
fun FavoriteScreen(viewModel: MainViewModel) {
    val favoriteProducts by viewModel.favoriteProducts.collectAsState()

    LazyColumn {
        items(favoriteProducts) { favorite ->
            FavoriteItem(favorite = favorite) {
                viewModel.toggleFavorite(favorite)
            }
        }
    }
}

@Composable
fun FavoriteItem(favorite: FavoriteProduct, onRemoveFavorite: () -> Unit) {
    // UI for each favorite item
}
