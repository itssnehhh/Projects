  testImplementation ("androidx.arch.core:core-testing:2.1.0")
    testImplementation ("org.jetbrains.kotlin:kotlin-test:1.5.10")lÌ¥


package com.example.cpuniversitydirectory.viewModel


import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import com.example.cpuniversitydirectory.data.model.University
import com.example.cpuniversitydirectory.data.network.UniversityRepository
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.TestCoroutineDispatcher
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runBlockingTest
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.mockito.Mockito.`when`
import org.mockito.kotlin.mock
import kotlin.test.assertEquals

@ExperimentalCoroutinesApi
class UniversityViewModelTest {

    private val testDispatcher = TestCoroutineDispatcher()

    @get:Rule
    val instantTaskExecutorRule = InstantTaskExecutorRule()

    private lateinit var universityViewModel: UniversityViewModel
    private lateinit var repository: UniversityRepository

    @Before
    fun setUp() {
        repository = mock()
        universityViewModel = UniversityViewModel(repository)
        kotlinx.coroutines.Dispatchers.setMain(testDispatcher)
    }

    @After
    fun tearDown() {
        kotlinx.coroutines.Dispatchers.resetMain()
        testDispatcher.cleanupTestCoroutines()
    }

    @Test
    fun `test loadUniversityData`() = testDispatcher.runBlockingTest {
        universityViewModel.loadUniversityData()

        val universityTitles = universityViewModel.universityTitles.first()
        val universityCities = universityViewModel.universityCities.first()

        assertEquals(listOf("University1", "University2", "University3"), universityTitles)
        assertEquals(listOf("City 1", "City 2", "City 3"), universityCities)
    }

    @Test
    fun `test loadCategoryData`() = testDispatcher.runBlockingTest {
        universityViewModel.loadCategoryData()

        val categories = universityViewModel.categories.first()
        assertEquals(listOf("Category 1", "Category 2", "Category 3"), categories)
    }

    @Test
    fun `test loadArticleData`() = testDispatcher.runBlockingTest {
        universityViewModel.loadArticleData()

        val articles = universityViewModel.articles.first()
        assertEquals(listOf("Article 1", "Article 2", "Article 3"), articles)
    }

    @Test
    fun `test searchUniversity`() = testDispatcher.runBlockingTest {
        val expectedUniversities =
            listOf(University("Test University", "Test Country", listOf("www.test.com")))
        `when`(repository.getUniversityByCountry("Test Country")).thenReturn(expectedUniversities)

        universityViewModel.searchUniversity("Test Country")

        val searchResults = universityViewModel.searchUniversity.first()
        assertEquals(expectedUniversities, searchResults)
    }
}